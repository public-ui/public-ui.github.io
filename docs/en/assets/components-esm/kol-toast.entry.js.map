{"file":"kol-toast.entry.js","mappings":";;;;;;;;;;;AAIO,MAAM,kBAAkB,GAAG,CAAC,QAAQ,EAAE,SAAS,EAAE,UAAU,CAAU;;ACJ5E,MAAM,eAAe,GAAG,EAAE;;MCkBb,QAAQ;;;IAmEH,UAAK,GAAG;;MACxB,IAAI,CAAA,MAAA,IAAI,CAAC,GAAG,0CAAE,OAAO,MAAK,SAAS,EAAE;QACpC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;OACrC;KACD,CAAC;IAEe,OAAE,GAAG;MACrB,OAAO,EAAE,IAAI,CAAC,KAAK;KACnB,CAAC;;;;iBAxDiC,SAAS;iBAEZ;MAC/B,MAAM,EAAE,KAAK;MACb,OAAO,EAAE,QAAQ;KACjB;;EAGM,aAAa,CAAC,KAAqB;IACzC,aAAa,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;GAC3B;EAGM,UAAU,CAAC,KAAkC;IACnD,IAAI,OAAO,KAAK,KAAK,QAAQ,KAAK,QAAO,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,OAAO,CAAA,KAAK,UAAU,IAAI,KAAK,CAAC,OAAO,KAAK,IAAI,CAAC,EAAE;MAClG,QAAQ,CAA6B,IAAI,EAAE,KAAK,EAAE,EAAE,OAAO,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;KAC9E;GACD;EAGM,cAAc,CAAC,MAAoB;IACzC,cAAc,CACb,IAAI,EACJ,SAAS,EACT,CAAC,MAAM,KAAK,OAAO,MAAM,KAAK,QAAQ,IAAI,kBAAkB,CAAC,QAAQ,CAAC,MAAM,CAAC,EAC7E,IAAI,GAAG,CAAC,oCAAoC,CAAC,EAC7C,MAAM,CACN,CAAC;GACF;EAGM,YAAY,CAAC,KAAiB;IACpC,cAAc,CACb,IAAI,EACJ,OAAO,EACP,CAAC,KAAK,KAAK,OAAO,KAAK,KAAK,QAAQ,KAAK,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,OAAO,IAAI,KAAK,KAAK,MAAM,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,SAAS,CAAC,EACpJ,IAAI,GAAG,CAAC,wCAAwC,CAAC,EACjD,KAAK,CACL,CAAC;GACF;EAEM,iBAAiB;IACvB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAChC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC1B,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAClC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;GAC9B;EAYM,MAAM;IACZ,QACC,WAAK,KAAK,EAAE,SAAS,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,IACxC,iBAAW,KAAK,EAAC,OAAO,EAAC,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,MAAM,EAAE,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,QAAQ,EAAC,MAAM,EAAC,GAAG,EAAE,IAAI,CAAC,EAAE,IACnJ,eAAQ,CACG,CACP,EACL;GACF;;;;;;;;;;;;;;","names":[],"sources":["src/components/toast-container/types.ts","src/components/toast/style.css?tag=kol-toast&mode=default&encapsulation=shadow","src/components/toast/component.tsx"],"sourcesContent":["import { Generic } from '@a11y-ui/core';\nimport { LabelPropType } from '../../types/props/label';\nimport { AlertType } from '../alert/types';\n\nexport const toastStatusOptions = ['adding', 'settled', 'removing'] as const;\nexport type ToastStatus = (typeof toastStatusOptions)[number];\n\nexport type Toast = {\n\tdescription: string;\n\tlabel: LabelPropType;\n\ttype: AlertType;\n};\n\nexport type ToastState = {\n\ttoast: Toast;\n\tstatus: ToastStatus;\n\tid: string;\n};\n\ntype RequiredProps = NonNullable<unknown>;\ntype OptionalProps = NonNullable<unknown>;\n\ntype RequiredStates = RequiredProps & {\n\ttoastStates: ToastState[];\n};\ntype OptionalStates = OptionalProps;\n\nexport type States = Generic.Element.Members<RequiredStates, OptionalStates>;\nexport type API = Generic.Element.ComponentApi<RequiredProps, OptionalProps, RequiredStates, OptionalStates>;\n","/* Placeholder file to allow theme styles to be applied. */\n","import { Component, h, JSX, Prop, State, Watch } from '@stencil/core';\nimport { LabelPropType, validateLabel } from '../../types/props/label';\nimport { KoliBriToastEventCallbacks } from '../../types/toast';\nimport { setState, watchValidator } from '../../utils/prop.validators';\nimport { AlertType } from '../alert/types';\nimport { API, States } from './types';\nimport { ToastStatus, toastStatusOptions } from '../toast-container/types';\n\n/**\n * @slot - Der Inhalt der Meldung.\n */\n@Component({\n\ttag: 'kol-toast',\n\tshadow: true,\n\tstyleUrls: {\n\t\tdefault: './style.css',\n\t},\n})\nexport class KolToast implements API {\n\t/**\n\t * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.).\n\t */\n\t@Prop() public _label!: LabelPropType;\n\n\t/**\n\t * Defines the event callback functions for the component.\n\t */\n\t@Prop() public _on?: KoliBriToastEventCallbacks;\n\n\t/**\n\t * Defines the current toast status.\n\t */\n\t@Prop() public _status!: ToastStatus;\n\n\t/**\n\t * Defines either the type of the component or of the components interactive element.\n\t */\n\t@Prop() public _type?: AlertType = 'default';\n\n\t@State() public state: States = {\n\t\t_label: '...',\n\t\t_status: 'adding',\n\t};\n\n\t@Watch('_label')\n\tpublic validateLabel(value?: LabelPropType): void {\n\t\tvalidateLabel(this, value);\n\t}\n\n\t@Watch('_on')\n\tpublic validateOn(value?: KoliBriToastEventCallbacks): void {\n\t\tif (typeof value === 'object' && (typeof value?.onClose === 'function' || value.onClose === true)) {\n\t\t\tsetState<KoliBriToastEventCallbacks>(this, '_on', { onClose: value.onClose });\n\t\t}\n\t}\n\n\t@Watch('_status')\n\tpublic validateStatus(status?: ToastStatus): void {\n\t\twatchValidator(\n\t\t\tthis,\n\t\t\t'_status',\n\t\t\t(status) => typeof status === 'string' && toastStatusOptions.includes(status),\n\t\t\tnew Set('String {adding, settled, removing}'),\n\t\t\tstatus\n\t\t);\n\t}\n\n\t@Watch('_type')\n\tpublic validateType(value?: AlertType): void {\n\t\twatchValidator(\n\t\t\tthis,\n\t\t\t'_type',\n\t\t\t(value) => typeof value === 'string' && (value === 'default' || value === 'error' || value === 'info' || value === 'success' || value === 'warning'),\n\t\t\tnew Set('String {success, info, warning, error}'),\n\t\t\tvalue\n\t\t);\n\t}\n\n\tpublic componentWillLoad(): void {\n\t\tthis.validateLabel(this._label);\n\t\tthis.validateOn(this._on);\n\t\tthis.validateStatus(this._status);\n\t\tthis.validateType(this._type);\n\t}\n\n\tprivate readonly close = () => {\n\t\tif (this._on?.onClose !== undefined) {\n\t\t\tthis._on.onClose(new Event('Close'));\n\t\t}\n\t};\n\n\tprivate readonly on = {\n\t\tonClose: this.close,\n\t};\n\n\tpublic render(): JSX.Element {\n\t\treturn (\n\t\t\t<div class={`toast ${this.state._status}`}>\n\t\t\t\t<kol-alert class=\"alert\" _alert={true} _label={this.state._label} _level={0} _hasCloser={true} _type={this.state._type} _variant=\"card\" _on={this.on}>\n\t\t\t\t\t<slot />\n\t\t\t\t</kol-alert>\n\t\t\t</div>\n\t\t);\n\t}\n}\n"],"version":3}