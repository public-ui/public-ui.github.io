{"file":"reuse-b3566e4c.js","mappings":";;;MAAa,QAAQ,GAAG,CAAC,KAAc,KAAc,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,KAAK,KAAK;MAEpF,QAAQ,GAAG,CAAC,KAAc,EAAE,SAAS,GAAG,CAAC,KAAc,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,CAAC,MAAM,IAAI,UAAU;MAE9G,OAAO,GAAG,CAAC,KAA8B;EACrD,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,KAAK,IAAI,EAAE;IAChD,KAAK,MAAM,QAAQ,IAAI,KAAK,EAAE;MAC7B,IAAI,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC,KAAK,KAAK,EAAE;QACpC,OAAO,KAAK,CAAC;OACb;KACD;GACD;OAAM;IACN,OAAO,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;GAC1B;EACD,OAAO,IAAI,CAAC;AACb,EAAE;MAKW,kBAAkB,GAAG,IAAI,KAAK,CAAC,aAAa;;MClB5C,cAAc,GAAG,CAA+C,IAAQ,EAAE,GAAO;EAC7F,IAAI,QAAQ,CAAC,IAAI,CAAC,IAAI,IAAI,EAAE;IAC3B,IAAI,CAAC,KAAK,GAAG,CAAC,GAAiB,KAAK,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,KAAK,CAAC,GAAG,CAAC,CAAC;GACpD;AACF,EAAE;IAIS,UAAU,GAAe,cAAc;AAClD,IAAI;EACH,UAAU,GAAG,YAAkC,CAAC;CAChD;AAAC,OAAO,CAAC,EAAE;EACX,UAAU,GAAG,YAAY,CAAC;CAC1B;MAMY,iBAAiB,GAAG,CAAC,OAAoB,EAAE,OAAoB,EAAE,QAAgB;EAC7F,IAAI,OAAO,IAAI,OAAO,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;IACvD,MAAM,OAAO,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,QAAQ,IAAI,CAAC,CAAC;IAC9D,IAAI,OAAO,EAAE;MACZ,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;KAC7B;GACD;AACF,EAAE;MAOW,cAAc,GAAG,CAAC,KAAc,KAAK,KAAK,KAAK;;;;","names":[],"sources":["src/utils/validator.ts","src/utils/reuse.ts"],"sourcesContent":["export const isObject = (value: unknown): boolean => typeof value === 'object' && value !== null;\n\nexport const isString = (value: unknown, minLength = 0): boolean => typeof value === 'string' && value.length >= minLength;\n\nexport const isStyle = (style?: Record<string , string>): boolean => {\n\tif (typeof style === 'object' && style !== null) {\n\t\tfor (const property in style) {\n\t\t\tif (isString(property, 1) === false) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t} else {\n\t\treturn isString(style, 1);\n\t}\n\treturn true;\n};\n\n/**\n * Fix event instance for state changes.\n */\nexport const STATE_CHANGE_EVENT = new Event('StateChange');\n","import { isObject } from './validator';\n\nexport const propagateFocus = <h extends htmlelement, r extends htmlelement>(host?: H, ref?: R) => {\n\tif (isObject(host) && host) {\n\t\thost.focus = (ops: FocusOptions) => ref?.focus(ops);\n\t}\n};\n\nconst PROCESS_ENVS = ['development', 'production', 'test'] as const;\ntype ProcessEnv = (typeof PROCESS_ENVS)[number];\nexport let processEnv: ProcessEnv = 'development';\ntry {\n\tprocessEnv = process.env.NODE_ENV as ProcessEnv;\n} catch (e) {\n\tprocessEnv = 'production';\n}\n\n/**\n * This function is used to handle the slot content by\n * moving a DOM element to a defined slot element.\n */\nexport const handleSlotContent = (hostRef: HTMLElement, slotRef: HTMLElement, slotName: string) => {\n\tif (hostRef && slotRef && typeof slotName === 'string') {\n\t\tconst content = hostRef.querySelector(`[slot=\"${slotName}\"]`);\n\t\tif (content) {\n\t\t\tslotRef.appendChild(content);\n\t\t}\n\t}\n};\n\n/**\n * This function is used to check if a label is an empty string.\n * @param label The label of the slot\n * @returns True if the label is an empty string\n */\nexport const showExpertSlot = (label: unknown) => label === '';\n"],"version":3}</h></string>