{"file":"kol-kolibri.entry.js","mappings":";;;;;;;;;;;;AAAA,MAAM,eAAe,GAAG,wyIAAwyI,CAAC;AACj0I,gCAAe,eAAe;;MCkBjB,UAAU;;;QAyCd,sBAAiB,GAA2C,CAAC,SAAkB,EAAE,SAA+B;YACvH,IAAI,OAAO,SAAS,KAAK,QAAQ,EAAE;gBAClC,MAAM,IAAI,GAAG,SAAS,CAAC,SAAS,CAAC,CAAC;gBAClC,SAAS,CAAC,GAAG,CAAC,QAAQ,EAAE;oBACvB,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;oBACZ,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;oBACd,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;iBACb,CAAC,CAAC;aACH;iBAAM;gBACN,OAAO,CAAC,sGAAsG,CAAC,CAAC;aAChH;SACD,CAAC;sBA3B+C,SAAS;wBAKtB,IAAI;qBAED;YACtC,MAAM,EAAE;gBACP,GAAG,EAAE,CAAC;gBACN,KAAK,EAAE,EAAE;gBACT,IAAI,EAAE,GAAG;aACT;YACD,QAAQ,EAAE,IAAI;SACd;;IAtCM,MAAM;QACZ,MAAM,SAAS,GAAG,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,GAAG,CAAC;QACvG,QACC,EAAC,IAAI,qDAAC,KAAK,EAAC,aAAa,IACxB,4DAAK,IAAI,EAAC,KAAK,gBAAa,SAAS,CAAC,kBAAkB,CAAC,EAAE,KAAK,EAAC,4BAA4B,EAAC,OAAO,EAAC,aAAa,EAAC,IAAI,EAAE,SAAS,IAClI,6DAAM,CAAC,EAAC,+BAA+B,GAAG,EAC1C,6DAAM,CAAC,EAAC,+BAA+B,GAAG,EAC1C,6DAAM,CAAC,EAAC,2CAA2C,GAAG,EACtD,6DAAM,CAAC,EAAC,0CAA0C,GAAG,EACrD,6DAAM,CAAC,EAAC,iCAAiC,GAAG,EAC5C,6DAAM,CAAC,EAAC,mCAAmC,GAAG,EAC7C,IAAI,CAAC,KAAK,CAAC,QAAQ,KAAK,IAAI,KAC5B,6DAAM,CAAC,EAAC,KAAK,EAAC,CAAC,EAAC,KAAK,EAAC,IAAI,EAAE,SAAS,cAE9B,CACP,CACI,CACA,EACN;KACF;IAmCM,aAAa,CAAC,KAA8B;QAClD,aAAa,CAAC,IAAI,EAAE,KAAK,EAAE;YAC1B,YAAY,EAAE,SAAS;YACvB,KAAK,EAAE;gBACN,WAAW,EAAE,IAAI,CAAC,iBAAiB;aACnC;SACD,CAAC,CAAC;KACH;IAGM,eAAe,CAAC,KAAe;QACrC,YAAY,CAAC,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE;YACrC,YAAY,EAAE,IAAI;SAClB,CAAC,CAAC;KACH;IAEM,iBAAiB;QACvB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAChC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;KACpC;;;;;;;;;;;;","names":[],"sources":["src/components/kolibri/style.scss?tag=kol-kolibri&mode=default&encapsulation=shadow","src/components/kolibri/shadow.tsx"],"sourcesContent":["@import '../@shared/mixins';\n@import '../style';\n\n@layer kol-component {\n\t:host {\n\t\tdisplay: inline-block;\n\t\tfont-size: rem(16);\n\t}\n\n\ttext {\n\t\tfont-size: 90px;\n\t\tletter-spacing: normal;\n\t\tword-spacing: normal;\n\t}\n\n\tsvg {\n\t\tmax-height: 100%;\n\t}\n}\n","import { devHint, validateColor, watchBoolean } from '../../schema';\nimport { Component, Host, Prop, State, Watch, h } from '@stencil/core';\n\nimport { colorRgba } from './color-rgba';\n\nimport { translate } from '../../i18n';\n\nimport type { JSX } from '@stencil/core';\nimport type { Generic } from 'adopted-style-sheets';\n\nimport type { KolibriAPI, KolibriStates, PropColor, Stringified } from '../../schema';\n\n@Component({\n\ttag: 'kol-kolibri',\n\tstyleUrls: {\n\t\tdefault: './style.scss',\n\t},\n\tshadow: true,\n})\nexport class KolKolibri implements KolibriAPI {\n\tpublic render(): JSX.Element {\n\t\tconst fillColor = `rgb(${this.state._color.red},${this.state._color.green},${this.state._color.blue})`;\n\t\treturn (\n\t\t\t<Host class=\"kol-kolibri\">\n\t\t\t\t<svg role=\"img\" aria-label={translate('kol-kolibri-logo')} xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 600 600\" fill={fillColor}>\n\t\t\t\t\t<path d=\"M353 322L213 304V434L353 322Z\" />\n\t\t\t\t\t<path d=\"M209 564V304L149 434L209 564Z\" />\n\t\t\t\t\t<path d=\"M357 316L417 250L361 210L275 244L357 316Z\" />\n\t\t\t\t\t<path d=\"M329 218L237 92L250 222L272 241L329 218Z\" />\n\t\t\t\t\t<path d=\"M353 318L35 36L213 300L353 318Z\" />\n\t\t\t\t\t<path d=\"M391 286L565 272L421 252L391 286Z\" />\n\t\t\t\t\t{this.state._labeled === true && (\n\t\t\t\t\t\t<text x=\"250\" y=\"525\" fill={fillColor}>\n\t\t\t\t\t\t\tKoliBri\n\t\t\t\t\t\t</text>\n\t\t\t\t\t)}\n\t\t\t\t</svg>\n\t\t\t</Host>\n\t\t);\n\t}\n\n\t/**\n\t * Defines the color of the logo and label.\n\t */\n\t@Prop() public _color?: Stringified<PropColor> = '#003c78';\n\n\t/**\n\t * Defines whether the component has a label.\n\t */\n\t@Prop() public _labeled?: boolean = true;\n\n\t@State() public state: KolibriStates = {\n\t\t_color: {\n\t\t\tred: 0,\n\t\t\tgreen: 60,\n\t\t\tblue: 120,\n\t\t},\n\t\t_labeled: true,\n\t};\n\n\tprivate handleColorChange: Generic.Element.NextStateHooksCallback = (nextValue: unknown, nextState: Map<string, unknown>): void => {\n\t\tif (typeof nextValue === 'string') {\n\t\t\tconst rgba = colorRgba(nextValue);\n\t\t\tnextState.set('_color', {\n\t\t\t\tred: rgba[0],\n\t\t\t\tgreen: rgba[1],\n\t\t\t\tblue: rgba[2],\n\t\t\t});\n\t\t} else {\n\t\t\tdevHint(`[KolKolibri] You used the complex color schema. For the KoliBri we use need the color as hex string.`);\n\t\t}\n\t};\n\n\t@Watch('_color')\n\tpublic validateColor(value?: Stringified<PropColor>): void {\n\t\tvalidateColor(this, value, {\n\t\t\tdefaultValue: '#003c78',\n\t\t\thooks: {\n\t\t\t\tbeforePatch: this.handleColorChange,\n\t\t\t},\n\t\t});\n\t}\n\n\t@Watch('_labeled')\n\tpublic validateLabeled(value?: boolean): void {\n\t\twatchBoolean(this, '_labeled', value, {\n\t\t\tdefaultValue: true,\n\t\t});\n\t}\n\n\tpublic componentWillLoad(): void {\n\t\tthis.validateColor(this._color);\n\t\tthis.validateLabeled(this._labeled);\n\t}\n}\n"],"version":3}