{"file":"dev.utils-1ca991a2.js","mappings":"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","names":[],"sources":["src/schema/utils/dev.utils.ts"],"sourcesContent":["/* eslint-disable no-console */\n\ntype GetModeFn = () => boolean;\n\nlet WINDOW: Window | null = null;\nlet DOCUMENT: Document | null = null;\n\nexport const getWindow = (): Window => (WINDOW || typeof window === 'undefined' ? (null as unknown as Window) : window);\nexport const setWindow = (value: Window): void => {\n\tWINDOW = value;\n};\n\nexport const getDocument = (): Document => (DOCUMENT || typeof getWindow().document === 'undefined' ? (null as unknown as Document) : getWindow().document);\nexport const setDocument = (value: Document): void => {\n\tDOCUMENT = value;\n};\n\nlet DEV_MODE: boolean | null = null;\nlet EXPERIMENTAL_MODE: boolean | null = null;\nlet COLOR_CONTRAST_ANALYSIS: boolean | null = null;\n\nexport const getDevMode = (): boolean => DEV_MODE === true;\nexport const setDevMode = (value: boolean): void => {\n\tDEV_MODE = value;\n};\n\nexport const getExperimentalMode = (): boolean => EXPERIMENTAL_MODE === true;\nexport const setExperimentalMode = (value: boolean): void => {\n\tEXPERIMENTAL_MODE = value;\n};\n\nexport const getColorContrastAnalysis = (): boolean => COLOR_CONTRAST_ANALYSIS === true;\nexport const setColorContrastAnalysis = (value: boolean): void => {\n\tCOLOR_CONTRAST_ANALYSIS = value;\n};\n\ntype LogShieldOptions = {\n\tclassifier?: string;\n\tforceLog?: boolean;\n\toverwriteStyle?: string;\n};\n\nconst LOG_STYLE = 'color: white; background: #666; font-weight: bold; padding: .25em .5em; border-radius: 3px; border: 1px solid #000';\n\nconst mapToArray = (msg: unknown | unknown[]): unknown[] => {\n\treturn Array.isArray(msg) ? msg : [msg];\n};\n\nconst getLogLabel = (label: string): string => {\n\treturn `%c${label}`;\n};\n\nconst handleClassifier = (label: string, classifier?: string): string => {\n\tif (typeof classifier === 'string' && classifier.length > 0) {\n\t\treturn `${getLogLabel(label)} | ${classifier}`;\n\t} else {\n\t\treturn getLogLabel(label);\n\t}\n};\n\nconst getShield = (label: string, options?: LogShieldOptions): string[] => {\n\treturn [handleClassifier(label, options?.classifier), `${LOG_STYLE};${options?.overwriteStyle || ''}`];\n};\n\nconst isDevModeOrForceLog = (devMode: GetModeFn, forceLog?: boolean): boolean => devMode() || forceLog === true;\n\nexport class Logger {\n\tpublic constructor(\n\t\tprivate readonly label: string,\n\t\tprivate readonly devMode: GetModeFn,\n\t) {}\n\n\tpublic debug(msg: unknown | unknown[], options?: LogShieldOptions): void {\n\t\tif (isDevModeOrForceLog(this.devMode, options?.forceLog)) {\n\t\t\tconsole.debug(...getShield(this.label, options), ...mapToArray(msg));\n\t\t}\n\t}\n\n\tpublic info(msg: unknown | unknown[], options?: LogShieldOptions): void {\n\t\tif (isDevModeOrForceLog(this.devMode, options?.forceLog)) {\n\t\t\tconsole.info(...getShield(this.label, options), ...mapToArray(msg));\n\t\t}\n\t}\n\n\tpublic trace(msg: unknown | unknown[], options?: LogShieldOptions): void {\n\t\tif (isDevModeOrForceLog(this.devMode, options?.forceLog)) {\n\t\t\tconsole.trace(...getShield(this.label, options), ...mapToArray(msg));\n\t\t}\n\t}\n\n\tpublic warn(msg: unknown | unknown[], options?: LogShieldOptions): void {\n\t\tif (isDevModeOrForceLog(this.devMode, options?.forceLog)) {\n\t\t\tconsole.warn(...getShield(this.label, options), ...mapToArray(msg));\n\t\t}\n\t}\n\n\tpublic error(msg: unknown | unknown[], options?: LogShieldOptions): void {\n\t\tif (isDevModeOrForceLog(this.devMode, options?.forceLog)) {\n\t\t\tconsole.error(...getShield(this.label, options), ...mapToArray(msg));\n\t\t}\n\t}\n\n\tpublic throw(msg: unknown | unknown[], options?: LogShieldOptions): void {\n\t\tif (isDevModeOrForceLog(this.devMode, options?.forceLog)) {\n\t\t\tthrow new Error(...getShield(this.label, options), ...mapToArray(msg));\n\t\t}\n\t}\n}\n\nexport const Log = new Logger('KoliBri', getDevMode);\n"],"version":3}