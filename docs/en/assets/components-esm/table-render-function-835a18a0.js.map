{"file":"table-render-function-835a18a0.js","mappings":";;;AAOA,MAAM,IAAI,GAAW;IACpB;QACC,KAAK,EAAE,CAAC;QACR,OAAO,EAAE,KAAK;QACd,IAAI,EAAE,IAAI,IAAI,CAAC,0BAA0B,CAAC;KAC1C;IACD;QACC,KAAK,EAAE,CAAC;QACR,OAAO,EAAE,IAAI;QACb,IAAI,EAAE,IAAI,IAAI,CAAC,0BAA0B,CAAC;KAC1C;IACD;QACC,KAAK,EAAE,CAAC;QACR,OAAO,EAAE,KAAK;QACd,IAAI,EAAE,IAAI,IAAI,CAAC,0BAA0B,CAAC;KAC1C;CACD,CAAC;AACF,MAAM,OAAO,GAAwB;IACpC,UAAU,EAAE;QACX;YACC;gBACC,KAAK,EAAE,GAAG;gBACV,GAAG,EAAE,OAAO;gBAGZ,MAAM,EAAE,CAAC,GAAG,EAAE,IAAsB,KAAK,UAAU,IAAI,CAAC,KAAK,EAAE;aAC/D;YACD;gBACC,KAAK,EAAE,QAAQ;gBACf,GAAG,EAAE,SAAS;gBAGd,MAAM,EAAE,CAAC,EAAE,EAAE,IAAI;oBAChB,IAAI,IAAI,CAAC,KAAK,EAAE;wBACf,EAAE,CAAC,WAAW,GAAG,8BAA8B,CAAC;qBAChD;yBAAM;wBACN,EAAE,CAAC,WAAW,GAAG,kBAAkB,CAAC;qBACpC;iBACD;aACD;YACD;gBACC,KAAK,EAAE,eAAe;gBACtB,GAAG,EAAE,MAAM;gBAGX,MAAM,EAAE,CAAC,EAAE,EAAE,IAAI;oBAChB,EAAE,CAAC,SAAS,GAAG,WAAW,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,KAAwB,CAAC,WAAW,CAAC;iBACxG;gBACD,IAAI,EAAE,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,KAAK,KAAM,KAAc,CAAC,IAAI,CAAC,OAAO,EAAE,GAAI,KAAc,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;aAC5G;SACD;KACD;CACD,CAAC;AAEF,MAAM,SAAS,GAAG,QAAQ,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC;AAC7D,MAAM,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;AAElD,KAAK,CAAC,MAAM,GAAG,qCAAqC,CAAC;AACrD,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC;AACnB,KAAK,CAAC,QAAQ,GAAG,OAAO,CAAC;AACzB,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,WAAW,CAAC,KAAK,CAAC","names":[],"sources":["src/dev/table-render-function.ts"],"sourcesContent":["import type { KoliBriTableCell, KoliBriTableHeaders } from '../schema';\n\ntype Data = {\n\torder: number;\n\tdate: Date;\n\tshipped: boolean;\n};\nconst DATA: Data[] = [\n\t{\n\t\torder: 0,\n\t\tshipped: false,\n\t\tdate: new Date('1981-05-26T21:33:43.612Z'),\n\t},\n\t{\n\t\torder: 1,\n\t\tshipped: true,\n\t\tdate: new Date('1971-04-25T19:44:17.014Z'),\n\t},\n\t{\n\t\torder: 2,\n\t\tshipped: false,\n\t\tdate: new Date('1986-07-10T11:39:29.539Z'),\n\t},\n];\nconst HEADERS: KoliBriTableHeaders = {\n\thorizontal: [\n\t\t[\n\t\t\t{\n\t\t\t\tlabel: '#',\n\t\t\t\tkey: 'order',\n\n\t\t\t\t/* Example 1: Use render return value to format data */\n\t\t\t\trender: (_el, cell: KoliBriTableCell) => `Index: ${cell.label}`,\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Status',\n\t\t\t\tkey: 'shipped',\n\n\t\t\t\t/* Example 2: Simple render function using textContent */\n\t\t\t\trender: (el, cell) => {\n\t\t\t\t\tif (cell.label) {\n\t\t\t\t\t\tel.textContent = `Order has been dispatched 🚚`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tel.textContent = `Order pending 📦`;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Date (string)',\n\t\t\t\tkey: 'date',\n\n\t\t\t\t/* Example 3: Render function using innerHTML. ⚠️Make sure to sanitize data to avoid XSS. */\n\t\t\t\trender: (el, cell) => {\n\t\t\t\t\tel.innerHTML = `<strong>${Intl.DateTimeFormat('de-DE').format(cell.label as unknown as Date)}</strong>`;\n\t\t\t\t},\n\t\t\t\tsort: (data) => data.sort((data0, data1) => (data0 as Data).date.getTime() - (data1 as Data).date.getTime()),\n\t\t\t},\n\t\t],\n\t],\n};\n\nconst container = document.getElementById('table-container');\nconst table = document.createElement('kol-table');\n\ntable._label = 'Table example with render functions';\ntable._data = DATA;\ntable._headers = HEADERS;\ncontainer?.appendChild(table);\n"],"version":3}