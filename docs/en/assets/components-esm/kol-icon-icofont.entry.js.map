{"file":"kol-icon-icofont.entry.js","mappings":";;;;;MAqBa,cAAc;;;;;;;IACnB,MAAM;QACZ,QACC,EAAC,IAAI,qDAAC,KAAK,EAAC,kBAAkB,IAC7B,iEACC,WAAW,EAAE,OAAO,OAAO,IAAI,CAAC,KAAK,KAAK,QAAQ,GAAG,IAAI,IAAI,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE,EAC5E,UAAU,EAAE,IAAI,CAAC,UAAU,EAC3B,KAAK,EAAE,OAAO,IAAI,CAAC,KAAK,KAAK,QAAQ,GAAG,WAAW,IAAI,CAAC,KAAK,EAAE,GAAI,SAA+B,GACjG,CACI,EACN;KACF;;;;;","names":[],"sources":["src/components/icon-icofont/component.tsx"],"sourcesContent":["import type { Generic } from 'adopted-style-sheets';\nimport { Component, h, Host, JSX, Prop } from '@stencil/core';\n\nimport { Icofont } from '../../types/icofont';\nimport { PropAriaLabel } from '../../types/props/aria-label';\n\ntype RequiredProps = PropAriaLabel & {\n\ticon: Icofont;\n};\ntype OptionalProps = {\n\tpart: string;\n};\n// type Props = Generic.Element.Members<RequiredProps, OptionalProps>;\n\n/**\n * @deprecated Wir empfehlen die flexiblere KolIcon-Komponente zu verwenden.\n */\n@Component({\n\ttag: 'kol-icon-icofont',\n\tshadow: false,\n})\nexport class KolIconIcofont implements Generic.Element.Members<RequiredProps, OptionalProps> {\n\tpublic render(): JSX.Element {\n\t\treturn (\n\t\t\t<Host class=\"kol-icon-icofont\">\n\t\t\t\t<kol-icon\n\t\t\t\t\texportparts={`icon${typeof this._part === 'string' ? `,${this._part}` : ''}`}\n\t\t\t\t\t_ariaLabel={this._ariaLabel}\n\t\t\t\t\t_icon={typeof this._icon === 'string' ? `icofont-${this._icon}` : (undefined as unknown as string)}\n\t\t\t\t/>\n\t\t\t</Host>\n\t\t);\n\t}\n\n\t/**\n\t * Setzt die semantische Beschriftung der Komponente.\n\t */\n\t@Prop() public _ariaLabel!: string;\n\n\t/**\n\t * Gibt einen Identifier eines Icofont Icons an. (https://icofont.com/icons)\n\t */\n\t@Prop() public _icon!: Icofont;\n\n\t/**\n\t * Deprecated: Gibt den Identifier für den CSS-Part an, um das Icon von Außen ändern zu können. (https://meowni.ca/posts/part-theme-explainer/)\n\t *\n\t * @deprecated Das Styling sollte stets über CSS erfolgen.\n\t */\n\t@Prop() public _part?: string;\n}\n"],"version":3}