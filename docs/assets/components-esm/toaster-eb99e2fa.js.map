{"file":"toaster-eb99e2fa.js","mappings":";;;MAEa,cAAc;EAK1B,YAAqC,QAAkB;IAAlB,aAAQ,GAAR,QAAQ,CAAU;IACtD,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,qBAAqB,CAAC,CAAC;IAChF,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;GACvD;EAKM,OAAO,WAAW,CAAC,QAAkB;IAC3C,IAAI,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAC5C,IAAI,CAAC,QAAQ,EAAE;MACd,QAAQ,GAAG,IAAI,cAAc,CAAC,QAAQ,CAAC,CAAC;MACxC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;KACvC;IACD,OAAO,QAAQ,CAAC;GAChB;EAEM,OAAO;IACb,MAAM,OAAO,GAAG,IAAI,CAAC,qBAAqB,CAAC;IAC3C,IAAI,OAAO,EAAE;MACZ,IAAI,CAAC,qBAAqB,GAAG,SAAS,CAAC;MACvC,OAAO,CAAC,MAAM,EAAE,CAAC;KACjB;SAAM;MACN,OAAO,CAAC,IAAI,CAAC,sCAAsC,CAAC,CAAC;KACrD;GACD;EAEM,OAAO,CAAC,KAAY;IAK1B,IAAI,IAAI,CAAC,qBAAqB,IAAI,OAAO,IAAI,CAAC,qBAAqB,CAAC,OAAO,KAAK,UAAU,EAAE;MAC3F,OAAO,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;KACjD;GACD;EAEM,QAAQ;IACd,IAAI,IAAI,CAAC,qBAAqB,IAAI,OAAO,IAAI,CAAC,qBAAqB,CAAC,QAAQ,KAAK,UAAU,EAAE;MAC5F,KAAK,IAAI,CAAC,qBAAqB,CAAC,QAAQ,EAAE,CAAC;KAC3C;GACD;;AA7CuB,wBAAS,GAAkC,IAAI,GAAG,EAA4B;;;;","names":[],"sources":["src/components/toaster/toaster.tsx"],"sourcesContent":["import { Toast } from './types';\n\nexport class ToasterService {\n\tprivate static readonly instances: Map<Document, ToasterService> = new Map<Document, ToasterService>();\n\n\tprivate toastContainerElement?: HTMLKolToastContainerElement;\n\n\tprivate constructor(private readonly document: Document) {\n\t\tthis.toastContainerElement = this.document.createElement('kol-toast-container');\n\t\tthis.document.body.prepend(this.toastContainerElement);\n\t}\n\n\t/**\n\t * Get a toaster for the specified document environment. Each environment has exactly one instance of the service.\n\t */\n\tpublic static getInstance(document: Document) {\n\t\tlet instance = this.instances.get(document);\n\t\tif (!instance) {\n\t\t\tinstance = new ToasterService(document);\n\t\t\tthis.instances.set(document, instance);\n\t\t}\n\t\treturn instance;\n\t}\n\n\tpublic dispose() {\n\t\tconst element = this.toastContainerElement;\n\t\tif (element) {\n\t\t\tthis.toastContainerElement = undefined;\n\t\t\telement.remove();\n\t\t} else {\n\t\t\tconsole.warn('Toaster service is already disposed.');\n\t\t}\n\t}\n\n\tpublic enqueue(toast: Toast): Promise<() => void> | undefined {\n\t\t/**\n\t\t * We need this condition for SSR. The toast container is not rendered on the server,\n\t\t * so we can't enqueue toasts.\n\t\t */\n\t\tif (this.toastContainerElement && typeof this.toastContainerElement.enqueue === 'function') {\n\t\t\treturn this.toastContainerElement.enqueue(toast);\n\t\t}\n\t}\n\n\tpublic closeAll(): void {\n\t\tif (this.toastContainerElement && typeof this.toastContainerElement.closeAll === 'function') {\n\t\t\tvoid this.toastContainerElement.closeAll();\n\t\t}\n\t}\n}\n"],"version":3}