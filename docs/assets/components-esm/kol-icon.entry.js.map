{"file":"kol-icon.entry.js","mappings":";;;;;;;;;;AAAA,MAAM,eAAe,GAAG,sk5BAAsk5B;;MCgBjl5B,OAAO;;;;;iBAgCa;MAC/B,MAAM,EAAE,sBAAsB;MAC9B,MAAM,EAAE,EAAE;KACV;;EAlCM,MAAM;IACZ,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;IAC9C,QACC,EAAC,IAAI,IAAC,WAAW,EAAC,MAAM,IACvB,wBACc,QAAQ,GAAG,SAAS,GAAG,MAAM,gBAO9B,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,SAAS,EACpD,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,EACxB,IAAI,EAAC,MAAM,EACX,IAAI,EAAC,KAAK,GACN,CACC,EACN;GACF;EAkBM,aAAa,CAAC,KAAc;IAClC,WAAW,CAAC,IAAI,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;GACnC;EAGM,aAAa,CAAC,KAAqB;IACzC,aAAa,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;GAC3B;EAEM,iBAAiB;IACvB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAChC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;GAChC;;;;;;;;;;;;","names":[],"sources":["src/components/icon/style.css?tag=kol-icon&mode=default&encapsulation=shadow","src/components/icon/component.tsx"],"sourcesContent":["@import url(../../assets/codicons/codicon.css);\n@layer kol-component {\n\t:host {\n\t\tcolor: inherit;\n\t\tdisplay: contents;\n\t\theight: 1em;\n\t\tline-height: inherit;\n\t\twidth: 1em;\n\t}\n\n\t:host > i {\n\t\theight: 1em;\n\t\twidth: 1em;\n\t}\n\n\t/*\n   * The <code>:important</code> is important, because we should always override the font icon style.\n   */\n\t:host > i,\n\t:host > i:before {\n\t\tfont-size: inherit !important;\n\t}\n}\n","import { Component, h, Host, JSX, Prop, State, Watch } from '@stencil/core';\n\nimport { LabelPropType, validateLabel } from '../../types/props/label';\nimport { watchString } from '../../utils/prop.validators';\nimport { API, States } from './types';\n\n/**\n * @part icon - Ermöglicht das Styling des inneren Icons.\n */\n@Component({\n\ttag: 'kol-icon',\n\tstyleUrls: {\n\t\tdefault: './style.css',\n\t},\n\tshadow: true,\n})\nexport class KolIcon implements API {\n\tpublic render(): JSX.Element {\n\t\tconst ariaShow = this.state._label.length > 0;\n\t\treturn (\n\t\t\t<Host exportparts=\"icon\">\n\t\t\t\t<i\n\t\t\t\t\taria-hidden={ariaShow ? undefined : 'true'}\n\t\t\t\t\t/**\n\t\t\t\t\t * Die Auszeichnung `aria-hidden` ist eigentlich nicht erforderlich, da die aktuellen\n\t\t\t\t\t * Screenreader, wie NVDA und JAWS, es auch ohne `aria-hidden` nicht vorlesen.\n\t\t\t\t\t *\n\t\t\t\t\t * Referenz: https://www.w3.org/TR/wai-aria/states_and_properties#aria-hidden\n\t\t\t\t\t */\n\t\t\t\t\taria-label={ariaShow ? this.state._label : undefined}\n\t\t\t\t\tclass={this.state._icons}\n\t\t\t\t\tpart=\"icon\"\n\t\t\t\t\trole=\"img\"\n\t\t\t\t></i>\n\t\t\t</Host>\n\t\t);\n\t}\n\n\t/**\n\t * Defines the icon classnames (e.g. `_icons=\"fa-solid fa-user\"`).\n\t */\n\t@Prop() public _icons!: string;\n\n\t/**\n\t * Defines the visible or semantic label of the component (e.g. aria-label, label, headline, caption, summary, etc.).\n\t */\n\t@Prop() public _label!: LabelPropType;\n\n\t@State() public state: States = {\n\t\t_icons: 'codicon codicon-home',\n\t\t_label: '', // ⚠ required\n\t};\n\n\t@Watch('_icons')\n\tpublic validateIcons(value?: string): void {\n\t\twatchString(this, '_icons', value);\n\t}\n\n\t@Watch('_label')\n\tpublic validateLabel(value?: LabelPropType): void {\n\t\tvalidateLabel(this, value);\n\t}\n\n\tpublic componentWillLoad(): void {\n\t\tthis.validateIcons(this._icons);\n\t\tthis.validateLabel(this._label);\n\t}\n}\n"],"version":3}