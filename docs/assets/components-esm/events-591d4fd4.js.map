{"file":"events-591d4fd4.js","mappings":";;;;;;MAmCa,sBAAsB,GAAG,CAAC,SAAoC,EAAE,KAA8B;IAC1G,cAAc,CACb,SAAS,EACT,KAAK,EACL,CAAC,KAAK,KAAK,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,KAAK,IAAI,EACtD,IAAI,GAAG,CAAC,CAAC,kEAAkE,CAAC,CAAC,EAC7E,KAAK,CACL,CAAC;AACH,EAAE;MAEW,8BAA8B,GAAG,CAAC,SAAoC,EAAE,KAAsC;IAC1H,cAAc,CACb,SAAS,EACT,KAAK,EACL,CAAC,KAAK,KAAK,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,KAAK,IAAI,EACtD,IAAI,GAAG,CAAC,CAAC,2DAA2D,CAAC,CAAC,EACtE,KAAK,CACL,CAAC;AACH;;MCpCa,iBAAiB,GAAG,CAAC,SAAoC,EAAE,KAAyB,EAAE,aAA6B;IAC/H,yBAAyB,CAAC,KAAK,EAAE;QAChC,mBAAmB,CAAC,KAAK,EAAE;YAC1B,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;gBACjC,KAAK,GAAG,EAAE,CAAC;aACX;YACD,IAAI;gBACH,KAAK,GAAG,SAAS,CAAyB,KAAK,CAAC,CAAC;aAEjD;YAAC,OAAO,CAAC,EAAE;aAEX;YACD,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC,IAA0B,KAAK,OAAO,IAAI,KAAK,QAAQ,IAAI,IAAI,KAAK,IAAI,CAAC,EAAE;gBACnH,QAAQ,CAAC,SAAS,EAAE,OAAO,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;aACnD;SACD,CAAC,CAAC;KACH,CAAC,CAAC;AACJ;;MCjBa,qBAAqB,GAAG,CAAC,SAAoC,EAAE,KAA6B,EAAE,aAA6B;IACvI,yBAAyB,CAAC,KAAK,EAAE;QAChC,mBAAmB,CAAC,KAAK,EAAE;YAC1B,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;gBACjC,KAAK,GAAG,EAAE,CAAC;aACX;YACD,IAAI;gBACH,KAAK,GAAG,SAAS,CAAyB,KAAK,CAAC,CAAC;aAEjD;YAAC,OAAO,CAAC,EAAE;aAEX;YACD,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC,IAA0B,KAAK,OAAO,IAAI,KAAK,QAAQ,IAAI,IAAI,KAAK,IAAI,CAAC,EAAE;gBACnH,QAAQ,CAAC,SAAS,EAAE,WAAW,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;aACvD;SACD,CAAC,CAAC;KACH,CAAC,CAAC;AACJ;;MClBa,sBAAsB,GAAG,CAAC,SAAoC,EAAE,KAA8B;IAC1G,MAAM,oBAAoB,GAAG;QAC5B,IAAI;YACH,OAAO,SAAS,CAAwB,KAAK,CAAC,CAAC;SAC/C;QAAC,OAAO,CAAC,EAAE;YACX,OAAO,SAAS,CAAC;SACjB;KACD,CAAC;IAEF,MAAM,cAAc,GAAG,CAAC,KAA6B;QACpD,OAAO,KAAK,IAAI,QAAQ,CAAC,KAAK,CAAC,IAAI,OAAO,KAAK,CAAC,KAAK,KAAK,UAAU,KAAK,CAAC,KAAK,CAAC,YAAY,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC;KACnI,CAAC;IAEF,MAAM,WAAW,GAAG,OAAO,KAAK,KAAK,QAAQ,GAAG,oBAAoB,EAAE,GAAG,KAAK,CAAC;IAC/E,IAAI,cAAc,CAAC,WAAW,CAAC,EAAE;QAChC,QAAQ,CAAC,SAAS,EAAE,YAAY,EAAE,KAAK,CAAC,CAAC;KACzC;AACF;;ICjCY;AAAZ,WAAY,MAAM;IACjB,2BAAiB,CAAA;IACjB,+BAAqB,CAAA;IACrB,6BAAmB,CAAA;IACnB,mCAAyB,CAAA;IACzB,6BAAmB,CAAA;IACnB,6BAAmB,CAAA;IACnB,iCAAuB,CAAA;IACvB,mCAAyB,CAAA;IACzB,6BAAmB,CAAA;IACnB,qCAA2B,CAAA;IAC3B,qCAA2B,CAAA;IAC3B,mCAAyB,CAAA;IACzB,qCAA2B,CAAA;IAC3B,iCAAuB,CAAA;IACvB,6BAAmB,CAAA;IACnB,+BAAqB,CAAA;IACrB,2BAAiB,CAAA;IACjB,iDAAuC,CAAA;IACvC,+BAAqB,CAAA;AACtB,CAAC,EApBW,MAAM,KAAN,MAAM;;;;","names":[],"sources":["src/schema/props/table-callbacks.ts","src/schema/props/table-data.ts","src/schema/props/table-data-foot.ts","src/schema/props/table-selection.ts","src/schema/enums/events.ts"],"sourcesContent":["import type { Events } from '../enums';\nimport type { EventValueOrEventCallback } from '../types/callbacks';\nimport { watchValidator } from '../utils';\n\nimport type { Generic } from 'adopted-style-sheets';\nimport type { KoliBriSortDirection, KoliBriTableDataType } from '../types';\n\n/* types */\nexport type SortEventPayload = {\n\tkey: string;\n\tcurrentSortDirection: KoliBriSortDirection;\n};\n\nexport type SelectionChangeEventPayload = string[];\nexport type StatefulSelectionChangeEventPayload = KoliBriTableDataType[];\n\nexport type TableCallbacksPropType = {\n\t[Events.onSort]?: EventValueOrEventCallback<mouseevent , sorteventpayload>;\n\t[Events.onSelectionChange]?: EventValueOrEventCallback<event , selectionchangeeventpayload>;\n};\nexport type TableStatefulCallbacksPropType = {\n\t[Events.onSelectionChange]?: EventValueOrEventCallback<event , statefulselectionchangeeventpayload>;\n};\n/**\n * Defines the callback functions for table events.\n */\nexport type PropTableCallbacks = {\n\ton: TableCallbacksPropType;\n};\n\nexport type StatefulPropTableCallbacks = {\n\ton: TableStatefulCallbacksPropType;\n};\n\n/* validator */\nexport const validateTableCallbacks = (component: Generic.Element.Component, value?: TableCallbacksPropType): void => {\n\twatchValidator(\n\t\tcomponent,\n\t\t`_on`,\n\t\t(value) => typeof value === 'object' && value !== null,\n\t\tnew Set(['TableCallbacksPropType {Events.onSort, Events.onSelectionChange}']),\n\t\tvalue,\n\t);\n};\n\nexport const validateTableStatefulCallbacks = (component: Generic.Element.Component, value?: TableStatefulCallbacksPropType): void => {\n\twatchValidator(\n\t\tcomponent,\n\t\t`_on`,\n\t\t(value) => typeof value === 'object' && value !== null,\n\t\tnew Set(['TableStatefulCallbacksPropType {Events.onSelectionChange}']),\n\t\tvalue,\n\t);\n};\n","import type { Generic } from 'adopted-style-sheets';\n\nimport type { SetStateHooks } from '../utils';\nimport { emptyStringByArrayHandler, objectObjectHandler, parseJson, setState } from '../utils';\nimport type { KoliBriTableDataType, Stringified } from '../types';\n\n/* types */\nexport type TableDataPropType = Stringified<kolibritabledatatype []>;\n\n/**\n * Defines the primary table data.\n */\nexport type PropTableData = {\n\tdata: TableDataPropType;\n};\n\n/* validator */\nexport const validateTableData = (component: Generic.Element.Component, value?: TableDataPropType, setStateHooks?: SetStateHooks): void => {\n\temptyStringByArrayHandler(value, () => {\n\t\tobjectObjectHandler(value, () => {\n\t\t\tif (typeof value === 'undefined') {\n\t\t\t\tvalue = [];\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tvalue = parseJson<kolibritabledatatype []>(value);\n\t\t\t\t// eslint-disable-next-line no-empty\n\t\t\t} catch (e) {\n\t\t\t\t// value keeps the original data\n\t\t\t}\n\t\t\tif (Array.isArray(value) && value.every((data: KoliBriTableDataType) => typeof data === 'object' && data !== null)) {\n\t\t\t\tsetState(component, '_data', value, setStateHooks);\n\t\t\t}\n\t\t});\n\t});\n};\n","import type { Generic } from 'adopted-style-sheets';\n\nimport type { SetStateHooks } from '../utils';\nimport { emptyStringByArrayHandler, objectObjectHandler, parseJson, setState } from '../utils';\nimport type { KoliBriTableDataType, Stringified } from '../types';\n\n/* types */\nexport type TableDataFootPropType = Stringified<kolibritabledatatype []>;\n\n/**\n * Defines the data for the table footer.\n */\nexport type PropTableDataFoot = {\n\tdataFoot: TableDataFootPropType;\n};\n\n/* validator */\nexport const validateTableDataFoot = (component: Generic.Element.Component, value?: TableDataFootPropType, setStateHooks?: SetStateHooks): void => {\n\temptyStringByArrayHandler(value, () => {\n\t\tobjectObjectHandler(value, () => {\n\t\t\tif (typeof value === 'undefined') {\n\t\t\t\tvalue = [];\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tvalue = parseJson<kolibritabledatatype []>(value);\n\t\t\t\t// eslint-disable-next-line no-empty\n\t\t\t} catch (e) {\n\t\t\t\t// value keeps the original data\n\t\t\t}\n\t\t\tif (Array.isArray(value) && value.every((data: KoliBriTableDataType) => typeof data === 'object' && data !== null)) {\n\t\t\t\tsetState(component, '_dataFoot', value, setStateHooks);\n\t\t\t}\n\t\t});\n\t});\n};\n","import type { Generic } from 'adopted-style-sheets';\nimport type { KoliBriTableSelection, Stringified } from '../types';\nimport { parseJson, setState } from '../utils';\nimport { isObject } from '../validators';\n\n/* types */\nexport type TableSelectionPropType = Stringified<kolibritableselection>;\n\n/**\n * Defines how rows can be selected and the current selection.\n */\nexport type PropTableSelection = {\n\tselection: TableSelectionPropType;\n};\n\n/* validator */\nexport const validateTableSelection = (component: Generic.Element.Component, value?: TableSelectionPropType): void => {\n\tconst parseSerializedValue = () => {\n\t\ttry {\n\t\t\treturn parseJson<kolibritableselection>(value);\n\t\t} catch (e) {\n\t\t\treturn undefined;\n\t\t}\n\t};\n\n\tconst validateObject = (value?: KoliBriTableSelection) => {\n\t\treturn value && isObject(value) && typeof value.label === 'function' && (!value.selectedKeys || Array.isArray(value.selectedKeys));\n\t};\n\n\tconst objectValue = typeof value === 'string' ? parseSerializedValue() : value;\n\tif (validateObject(objectValue)) {\n\t\tsetState(component, '_selection', value);\n\t}\n};\n","export enum Events {\n\tonBlur = 'onBlur',\n\tonChange = 'onChange',\n\tonClick = 'onClick',\n\tonDblClick = 'onDblClick',\n\tonFocus = 'onFocus',\n\tonInput = 'onInput',\n\tonKeyDown = 'onKeyDown',\n\tonKeyPress = 'onKeyPress',\n\tonKeyUp = 'onKeyUp',\n\tonMouseDown = 'onMouseDown',\n\tonMouseMove = 'onMouseMove',\n\tonMouseOut = 'onMouseOut',\n\tonMouseOver = 'onMouseOver',\n\tonMouseUp = 'onMouseUp',\n\tonReset = 'onReset',\n\tonSelect = 'onSelect',\n\tonSort = 'onSort',\n\tonSelectionChange = 'onSelectionChange',\n\tonSubmit = 'onSubmit',\n}\n"],"version":3}</kolibritableselection></kolibritableselection></kolibritabledatatype></kolibritabledatatype></kolibritabledatatype></kolibritabledatatype></event></event></mouseevent>