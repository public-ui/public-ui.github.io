"use strict";(self.webpackChunkroot=self.webpackChunkroot||[]).push([[11477],{30010:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/2023/08/29/","metadata":{"permalink":"/blog/2023/08/29/","source":"@site/blog/2023-08-29.mdx","title":"Formular-Handling mit React Hook Form","description":"Was ist React Hook Form?","date":"2023-08-29T00:00:00.000Z","formattedDate":"29. August 2023","tags":[],"readingTime":0.445,"hasTruncateMarker":false,"authors":[{"name":"Martin Oppitz","title":"Architekt@ITZBund & Creator of KoliBri","url":"https://github.com/deleonio","imageURL":"https://avatars.githubusercontent.com/u/6279703","key":"deleonio"}],"frontMatter":{"title":"Formular-Handling mit React Hook Form","authors":"deleonio"},"unlisted":false,"nextItem":{"title":"Aria-Attributen bei Button- und Link","permalink":"/blog/2023/07/26/"}},"content":"## Was ist React Hook Form?\\n\\nReact Hook Form ist eine Bibliothek, die das Handling von Formularen in React vereinfacht. Sie ist sehr leichtgewichtig und hat keine Abh\xe4ngigkeiten. Sie ist also eine gute Alternative zu Formik, das eine \xe4hnliche Funktionalit\xe4t bietet, aber deutlich mehr Code mit sich bringt.\\n\\nIm folgenden Video zeigen wir, wie man die popul\xe4re Bibliothek React Hook Form in einem React+KoliBri-Projekt einsetzen kann.\\n\\n<iframe\\n\\twidth=\\"560\\"\\n\\theight=\\"315\\"\\n\\tsrc=\\"https://www.youtube-nocookie.com/embed/0REpAEzopmA?si=y83MzWYcPpxh4zAw\\"\\n\\ttitle=\\"YouTube video player - KoliBri meets React Hook Form\\"\\n\\tframeborder=\\"0\\"\\n\\tallow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\"\\n\\tallowfullscreen=\\"allowfullscreen\\"\\n></iframe>"},{"id":"/2023/07/26/","metadata":{"permalink":"/blog/2023/07/26/","source":"@site/blog/2023-07-26.mdx","title":"Aria-Attributen bei Button- und Link","description":"Bei der Entwicklung von KoliBri ist die Frage aufgekommen, welche Aria-Attributen bei den Button- und Link-Komponenten unterst\xfctzen werden sollen.","date":"2023-07-26T00:00:00.000Z","formattedDate":"26. Juli 2023","tags":[{"label":"aria","permalink":"/blog/tags/aria"},{"label":"button","permalink":"/blog/tags/button"},{"label":"link","permalink":"/blog/tags/link"}],"readingTime":1.185,"hasTruncateMarker":false,"authors":[{"name":"Martin Oppitz","title":"Architekt@ITZBund & Creator of KoliBri","url":"https://github.com/deleonio","imageURL":"https://avatars.githubusercontent.com/u/6279703","key":"deleonio"}],"frontMatter":{"title":"Aria-Attributen bei Button- und Link","authors":"deleonio","tags":["aria","button","link"]},"unlisted":false,"prevItem":{"title":"Formular-Handling mit React Hook Form","permalink":"/blog/2023/08/29/"},"nextItem":{"title":"KoliBri - intuitiv erlernen","permalink":"/blog/2023/07/11/"}},"content":"Bei der Entwicklung von KoliBri ist die Frage aufgekommen, welche Aria-Attributen bei den Button- und Link-Komponenten unterst\xfctzen werden sollen.\\n\\nIn der folgenden Tabelle wir eine \xdcbersicht \xfcber die Unterschiede dargestellt:\\n\\n|          Merkmal           | Link | LinkButton |  Button  | ButtonLink | ToogleButton<sup>1</sup> |\\n| :------------------------: | :--: | :--------: | :------: | :--------: | :----------------------: |\\n|           Design           | Link |   Button   |  Button  |    Link    |          Button          |\\n|          Semantik          | `a`  |    `a`     | `button` |  `button`  |         `input`          |\\n|      `_ariaControls`       |  \u2796  |     \u2796     |    \u2795    |     \u2795     |            \u2753            |\\n| `_ariaCurrent`<sup>2</sup> |  \u2795  |     \u2795     |    \u2796    |     \u2796     |            \u2753            |\\n|      `_ariaExpanded`       |  \u2796  |     \u2796     |    \u2795    |     \u2795     |            \u2753            |\\n|      `_ariaSelected`       |  \u2796  |     \u2796     |    \u2795    |     \u2795     |            \u2753            |\\n|        `_disabled`         |  \u2796  |     \u2796     |    \u2795    |     \u2795     |            \u2795            |\\n|          `_href`           |  \u2795  |     \u2795     |    \u2796    |     \u2796     |            \u2796            |\\n|           `_on`            |  \u2795  |     \u2795     |    \u2795    |     \u2795     |            \u2795            |\\n|          `_value`          |  \u2796  |     \u2796     |    \u2795    |     \u2795     |        `boolean`         |\\n|         `focus()`          |  \u2795  |     \u2795     |    \u2795    |     \u2795     |            \u2795            |\\n\\n<small>\\n\\t<sup>1</sup> Der Toogle-Button wurde als Variante der Checkbox umgesetzt, weil es ein Schalter mit maximal zwei\\n\\tZust\xe4nden (entweder \\"an\\" oder \\"aus\\") ist.\\n\\t<br />\\n\\t<sup>2</sup> Das `_ariaCurrent`-Attribut wird zuk\xfcnftig \xfcber ein Event statt ein Property gesetzt.\\n</small>"},{"id":"/2023/07/11/","metadata":{"permalink":"/blog/2023/07/11/","source":"@site/blog/2023-07-11.mdx","title":"KoliBri - intuitiv erlernen","description":"Hinweis: Dieser Artikel wurde zu Teilen durch [ChatGPT] generiert. Die Inhalte wurden von einem Menschen \xfcberpr\xfcft und ggf. angepasst.","date":"2023-07-11T00:00:00.000Z","formattedDate":"11. Juli 2023","tags":[],"readingTime":2.095,"hasTruncateMarker":false,"authors":[{"name":"ChatGPT","title":"AI companion - Answering questions, sparking conversations, helping.","url":"https://chat.openai.com","imageURL":"https://upload.wikimedia.org/wikipedia/commons/thumb/0/04/ChatGPT_logo.svg/1200px-ChatGPT_logo.svg.png","key":"chatgpt"},{"name":"Martin Oppitz","title":"Architekt@ITZBund & Creator of KoliBri","url":"https://github.com/deleonio","imageURL":"https://avatars.githubusercontent.com/u/6279703","key":"deleonio"}],"frontMatter":{"title":"KoliBri - intuitiv erlernen","authors":["chatgpt","deleonio"]},"unlisted":false,"prevItem":{"title":"Aria-Attributen bei Button- und Link","permalink":"/blog/2023/07/26/"},"nextItem":{"title":"Komponentenbibliothek vs. Designsystem","permalink":"/blog/2023/06/28/"}},"content":"import { KolLink } from \'@public-ui/react\';\\n\\n> Hinweis: Dieser Artikel wurde zu Teilen durch [ChatGPT] generiert. Die Inhalte wurden von einem Menschen \xfcberpr\xfcft und ggf. angepasst.\\n\\nIm Laufe der Jahre weisen die Benennung und Semantik in HTML teilweise gro\xdfe Unterschieden auf. Aufgrund der Abw\xe4rtskompatibilit\xe4t von HTML sind Korrekturen und \xc4nderungen nur \xe4u\xdferst schwierig umzusetzen. Diese Situation hat zu unz\xe4hligen Best Practices und How-to\'s gef\xfchrt, die versuchen, auf unterschiedliche Weise \xe4hnliche Anforderungen umzusetzen. Angesichts des wachsenden Bewusstseins f\xfcr Barrierefreiheit und den damit verbundenen gesetzlichen Anforderungen gewinnt die Semantik jedoch eine immense Bedeutung. Hier kommt KoliBri ins Spiel, indem es einen barrierefreien Webcomponent-Standard auf HTML schafft und gleichzeitig f\xfcr eine einheitlichere und somit leicht erlernbare Verwendung sorgt.\\n\\n## Einheitliche Property-Namen\\n\\nDie Verwendung eines einzigen Property-Namens f\xfcr gleichartige Eigenschaften ist ein wichtiger Grundsatz, der die Konsistenz in der Entwicklung f\xf6rdert. Durch die einheitliche Benennung wird vermieden, dass Entwickler:innen nach unterschiedlichen Bezeichnungen f\xfcr \xe4hnliche Eigenschaften suchen m\xfcssen. Dies erh\xf6ht die Effizienz und die Erlernbarkeit des Codes erheblich.\\n\\n## Einheitliche Beschreibungen\\n\\nWenn m\xf6glich, sollen gleiche Property-Namen auch einheitliche Beschreibungen haben. Klar formulierte und konsistente Beschreibungen erleichtern es Entwickler:innen, die Funktionalit\xe4t einer Eigenschaft zu verstehen und richtig einzusetzen. Durch die Verwendung einheitlicher Beschreibungen wird die Dokumentation vereinfacht und die Fehleranf\xe4lligkeit reduziert.\\n\\n## Einheitliche Typen\\n\\n\xc4hnlich wie bei den Beschreibungen ist es w\xfcnschenswert, dass gleiche Property-Namen auch einheitliche Typen haben, sofern dies m\xf6glich ist. Einheitliche Typen erleichtern die Verwendung und das Verst\xe4ndnis der Eigenschaften und tragen zur einheitlichen Handhabung bei.\\n\\n## Minimierung der Unterschiede\\n\\nUm die Komplexit\xe4t zu reduzieren und die Erlernbarkeit zu verbessern, ist es wichtig, die Anzahl der unterschiedlichen Eigenschaften, Beschreibungen und Typen zu minimieren. Durch eine bewusste Entscheidung, nur die notwendigen und relevanten Eigenschaften zu definieren, wird der Entwicklungsprozess schlanker und effizienter. Dies erleichtert auch die Wartung und Weiterentwicklung der Komponenten \xfcber die Zeit hinweg.\\n\\n## Fazit\\n\\nDie Verwendung von einheitlichen Eigenschaften in der Entwicklung von Komponenten ist ein entscheidender Faktor f\xfcr eine bessere Erlernbarkeit und Effizienz. Durch die Einhaltung der definierten Anforderungen, wie die Verwendung eines einzigen Property-Namens, einheitliche Beschreibungen und Typen sowie die Minimierung von Unterschieden, k\xf6nnen Entwickler:innen einfacher und schneller mit den Komponenten arbeiten. Dies f\xfchrt zu qualitativ hochwertigerem Code, einer verbesserten Zusammenarbeit und letztendlich zu einer besseren Benutzererfahrung. Indem wir die Bedeutung der Einheitlichkeit in der Entwicklung betonen, k\xf6nnen wir die Barrierefreiheit und die Qualit\xe4t unserer digitalen L\xf6sungen weiter vorantreiben.\\n\\n## Ausblick\\n\\nUnd das Beste ist, alle Verbesserungen flie\xdfen soweit m\xf6glich schon in Version 1 ein und bereiten damit eine m\xf6glichst harmonische Migration auf Version 2 vor.\\n\\n[ChatGPT]: https://chat.openai.com/"},{"id":"/2023/06/28/","metadata":{"permalink":"/blog/2023/06/28/","source":"@site/blog/2023-06-28.mdx","title":"Komponentenbibliothek vs. Designsystem","description":"Hinweis: Dieser Artikel wurde zu Teilen durch [ChatGPT] generiert. Die Inhalte wurden von einem Menschen \xfcberpr\xfcft und ggf. angepasst.","date":"2023-06-28T00:00:00.000Z","formattedDate":"28. Juni 2023","tags":[],"readingTime":9.595,"hasTruncateMarker":false,"authors":[{"name":"ChatGPT","title":"AI companion - Answering questions, sparking conversations, helping.","url":"https://chat.openai.com","imageURL":"https://upload.wikimedia.org/wikipedia/commons/thumb/0/04/ChatGPT_logo.svg/1200px-ChatGPT_logo.svg.png","key":"chatgpt"},{"name":"Martin Oppitz","title":"Architekt@ITZBund & Creator of KoliBri","url":"https://github.com/deleonio","imageURL":"https://avatars.githubusercontent.com/u/6279703","key":"deleonio"}],"frontMatter":{"title":"Komponentenbibliothek vs. Designsystem","authors":["chatgpt","deleonio"]},"unlisted":false,"prevItem":{"title":"KoliBri - intuitiv erlernen","permalink":"/blog/2023/07/11/"},"nextItem":{"title":"Ank\xfcndigung Release 1.6","permalink":"/blog/2023/06/08/"}},"content":"import { KolLink } from \'@public-ui/react\';\\n\\n> Hinweis: Dieser Artikel wurde zu Teilen durch [ChatGPT] generiert. Die Inhalte wurden von einem Menschen \xfcberpr\xfcft und ggf. angepasst.\\n\\n## Was ist eine Komponentenbibliothek?\\n\\nEine Komponentenbibliothek ist eine Sammlung wiederverwendbarer Softwarekomponenten, die f\xfcr die Entwicklung von Anwendungen verwendet werden k\xf6nnen. Diese Komponenten sind in der Regel speziell auf eine bestimmte Technologie oder ein bestimmtes Framework ausgerichtet und bieten vorgefertigte Funktionen, Module oder Bausteine, die in verschiedenen Anwendungen eingesetzt werden k\xf6nnen.\\n\\nEine Komponentenbibliothek enth\xe4lt typischerweise eine Vielzahl von vordefinierten Komponenten, wie z.B. Benutzeroberfl\xe4chenelemente (z.B. Buttons, Eingabefelder, Dropdown-Men\xfcs), Diagramme, Tabellen, Formulare und andere Funktionen, die in Anwendungen ben\xf6tigt werden. Diese Komponenten sind in der Regel gut dokumentiert und folgen einem bestimmten Design- oder Programmierparadigma, um eine konsistente Entwicklung von Anwendungen zu erm\xf6glichen.\\n\\nDie Verwendung einer Komponentenbibliothek kann die Entwicklung von Anwendungen beschleunigen, da Entwickler nicht jedes Mal von Grund auf neue Komponenten erstellen m\xfcssen. Stattdessen k\xf6nnen sie auf die vorgefertigten Komponenten zur\xfcckgreifen, sie anpassen und in ihre Anwendungen integrieren. Dies spart Zeit und Aufwand und erm\xf6glicht es den Entwicklern, sich auf die spezifischen Anforderungen ihrer Anwendung zu konzentrieren, anstatt sich mit der Implementierung grundlegender Komponenten auseinanderzusetzen.\\n\\nKomponentenbibliotheken werden h\xe4ufig in der Web- und Softwareentwicklung eingesetzt, insbesondere in Frameworks wie React, Angular oder Vue.js, um die Entwicklung von benutzerfreundlichen und konsistenten Benutzeroberfl\xe4chen zu erleichtern. Sie bieten eine M\xf6glichkeit, modulare und skalierbare Anwendungen zu erstellen, indem sie die Wiederverwendung von Code und die Trennung von Aufgaben erm\xf6glichen.\\n\\n## Was ist ein Designsystem?\\n\\nEin Designsystem ist eine Sammlung von Richtlinien, Regeln, Prinzipien, Komponenten und Ressourcen, die dazu dienen, ein konsistentes und effizientes Design f\xfcr eine Marke, eine Produktreihe oder eine Anwendung zu gew\xe4hrleisten. Es bietet einen einheitlichen Rahmen und eine gemeinsame Designsprache, um das Erscheinungsbild, die Interaktionen und die Benutzererfahrung \xfcber verschiedene Plattformen und Kan\xe4le hinweg zu harmonisieren.\\n\\nEin Designsystem umfasst in der Regel verschiedene Elemente, wie beispielsweise:\\n\\n1. Designrichtlinien: Eine ausf\xfchrliche Dokumentation, die die Designprinzipien, -richtlinien und -standards beschreibt. Hierbei werden Schriftarten, Farbpaletten, Layouts, Icons, Animationen und andere visuelle Elemente festgelegt.\\n\\n2. Komponentenbibliothek: Eine Sammlung von wiederverwendbaren Designkomponenten, die in der Anwendungsentwicklung eingesetzt werden k\xf6nnen. Diese Komponenten umfassen beispielsweise Buttons, Formularelemente, Karten, Navigationselemente und andere UI-Elemente.\\n\\n3. UI-Patterns: Vordefinierte L\xf6sungen f\xfcr wiederkehrende Designprobleme oder Interaktionsmuster, die in der Anwendungsentwicklung auftreten k\xf6nnen. Sie bieten bew\xe4hrte Vorgehensweisen f\xfcr die Benutzerinteraktion und verbessern die Konsistenz der Benutzererfahrung.\\n\\n4. Style-Guide: Ein Dokument oder eine Ressource, die die visuellen Elemente des Designs detailliert beschreibt, wie beispielsweise Farben, Schriftarten, Abst\xe4nde, Schattierungen und andere Designattribute.\\n\\n5. Ressourcen und Assets: Hierzu geh\xf6ren Grafiken, Icons, Bilder und andere Medienelemente, die im Designprozess verwendet werden.\\n\\nDer Zweck eines Designsystems besteht darin, die Effizienz und Konsistenz im Designprozess zu verbessern, die Markenidentit\xe4t zu st\xe4rken, die Zusammenarbeit zwischen Designern und Entwicklern zu f\xf6rdern und die Skalierbarkeit und Wartbarkeit von Designs \xfcber die Zeit zu gew\xe4hrleisten. Indem es klare Richtlinien und wiederverwendbare Komponenten bereitstellt, erleichtert ein Designsystem die Umsetzung und Aktualisierung des Designs und tr\xe4gt zur Schaffung einer nahtlosen und ansprechenden Benutzererfahrung bei.\\n\\n## Was ist der Unterschied zwischen einer Komponentenbibliothek und einem Designsystem\\n\\nEine Komponentenbibliothek und ein Designsystem sind zwei verwandte Konzepte, die jedoch unterschiedliche Schwerpunkte haben. Hier sind die Hauptunterschiede zwischen den beiden:\\n\\n1. Fokus: Eine Komponentenbibliothek konzentriert sich haupts\xe4chlich auf die Bereitstellung von wiederverwendbaren Softwarekomponenten, die in der Entwicklung von Anwendungen verwendet werden k\xf6nnen. Diese Komponenten dienen dazu, bestimmte Funktionen oder UI-Elemente bereitzustellen und k\xf6nnen unabh\xe4ngig von einem spezifischen Design angewendet werden. Ein Designsystem hingegen konzentriert sich auf die Definition der Designrichtlinien, -prinzipien und -elemente, die das Erscheinungsbild und die Benutzererfahrung einer Marke oder Anwendung pr\xe4gen.\\n\\n2. Umfang: Eine Komponentenbibliothek ist in der Regel ein Teil eines Designsystems. Sie enth\xe4lt eine Sammlung von wiederverwendbaren Komponenten, die den Designrichtlinien und -prinzipien des Designsystems entsprechen. Das Designsystem umfasst jedoch auch weitere Elemente wie Designrichtlinien, UI-Patterns, Style-Guides und Ressourcen, die \xfcber die Komponentenbibliothek hinausgehen.\\n\\n3. Zielgruppe: Eine Komponentenbibliothek richtet sich haupts\xe4chlich an Entwickler und bietet ihnen vorgefertigte Komponenten, um Anwendungen schneller zu entwickeln. Ein Designsystem hingegen richtet sich sowohl an Designer als auch an Entwickler, da es eine gemeinsame Designsprache und Richtlinien f\xfcr das gesamte Design- und Entwicklungs-Team bietet.\\n\\n4. Zweck: Der Zweck einer Komponentenbibliothek besteht darin, die Entwicklung von Anwendungen zu beschleunigen und die Wiederverwendbarkeit von Code zu f\xf6rdern. Ein Designsystem hingegen dient dazu, eine konsistente visuelle Identit\xe4t und Benutzererfahrung \xfcber verschiedene Plattformen und Kan\xe4le hinweg sicherzustellen.\\n\\nInsgesamt kann man sagen, dass eine Komponentenbibliothek ein praktischer Bestandteil eines Designsystems ist, w\xe4hrend das Designsystem ein umfassenderes Konzept ist, das \xfcber die reine Bereitstellung von Komponenten hinausgeht und eine gemeinsame Designsprache, Richtlinien und Ressourcen f\xfcr ein einheitliches Design und eine ansprechende Benutzererfahrung bietet.\\n\\n## Was sind die wichtigsten 5 Merkmale einer Komponentenbibliothek?\\n\\nDie wichtigsten f\xfcnf Merkmale einer Komponentenbibliothek sind:\\n\\n1. Wiederverwendbarkeit: Eine Komponentenbibliothek zeichnet sich durch wiederverwendbare Softwarekomponenten aus. Diese Komponenten k\xf6nnen in verschiedenen Anwendungen eingesetzt werden, um Zeit und Aufwand bei der Entwicklung zu sparen. Durch die Wiederverwendbarkeit wird auch die Konsistenz im Design und in der Funktionalit\xe4t gew\xe4hrleistet.\\n\\n2. Modularit\xe4t: Eine Komponentenbibliothek besteht aus einzelnen, unabh\xe4ngigen Modulen, die einzeln verwendet oder kombiniert werden k\xf6nnen. Jede Komponente erf\xfcllt eine spezifische Funktion oder stellt ein bestimmtes UI-Element bereit. Die Modularit\xe4t erm\xf6glicht es Entwicklern, nur die ben\xf6tigten Komponenten auszuw\xe4hlen und sie nach Bedarf anzupassen oder zu erweitern.\\n\\n3. Dokumentation: Eine gute Komponentenbibliothek enth\xe4lt eine umfassende Dokumentation, die erkl\xe4rt, wie die Komponenten verwendet werden k\xf6nnen. Die Dokumentation enth\xe4lt Anleitungen, Beispiele, Code-Snippets, API-Referenzen und Best Practices, um Entwicklern den Einstieg und die Nutzung der Komponenten zu erleichtern. Eine klare und umfassende Dokumentation ist entscheidend, um den Wert und die Effektivit\xe4t der Komponentenbibliothek zu maximieren.\\n\\n4. Konsistenz: Eine Komponentenbibliothek zielt darauf ab, Konsistenz im Design und in der Benutzererfahrung zu gew\xe4hrleisten. Die Komponenten sollten einheitliche Designrichtlinien und -prinzipien folgen, um ein koh\xe4rentes Erscheinungsbild und eine reibungslose Benutzerinteraktion zu erm\xf6glichen. Durch die Verwendung von Komponenten aus der Bibliothek wird die Gefahr von inkonsistentem oder fragmentiertem Design minimiert.\\n\\n5. Aktualisierbarkeit und Pflege: Eine gute Komponentenbibliothek wird regelm\xe4\xdfig aktualisiert, um neue Funktionen, Fehlerkorrekturen und Verbesserungen einzuf\xfchren. Dies erfordert eine solide Pflege und eine aktive Community oder Entwicklerteam, das die Komponentenbibliothek unterst\xfctzt und weiterentwickelt. Die F\xe4higkeit, die Komponentenbibliothek problemlos zu aktualisieren und zu warten, ist entscheidend, um sicherzustellen, dass sie mit den sich \xe4ndernden Anforderungen und Technologien Schritt halten kann.\\n\\nDiese Merkmale tragen dazu bei, dass eine Komponentenbibliothek effektiv und n\xfctzlich ist, indem sie Entwicklern eine solide Grundlage f\xfcr die Entwicklung von Anwendungen bietet und gleichzeitig die Konsistenz und Wiederverwendbarkeit f\xf6rdert.\\n\\n## Was sind die wichtigsten 5 Merkmale eines Designsystems?\\n\\nDie wichtigsten f\xfcnf Merkmale eines Designsystems sind:\\n\\n1. Designrichtlinien: Ein Designsystem enth\xe4lt ausf\xfchrliche Designrichtlinien, die die Designprinzipien, -standards und -best Practices f\xfcr eine Marke oder Anwendung festlegen. Diese Richtlinien definieren den visuellen Stil, die Farbpalette, die Typografie, den Einsatz von Icons, die Abst\xe4nde und andere gestalterische Elemente. Die Designrichtlinien dienen als Referenz und Leitfaden f\xfcr das gesamte Designteam, um eine konsistente und einheitliche visuelle Identit\xe4t sicherzustellen.\\n\\n2. Komponentenbibliothek: Ein Designsystem umfasst eine umfangreiche Komponentenbibliothek, die wiederverwendbare Designkomponenten enth\xe4lt. Diese Komponenten, wie Buttons, Formularelemente, Karten, Navigationselemente usw., werden im Einklang mit den Designrichtlinien entwickelt und k\xf6nnen von Designern und Entwicklern verwendet werden, um ein einheitliches Design und eine reibungslose Benutzererfahrung zu gew\xe4hrleisten.\\n\\n3. UI-Patterns: Ein Designsystem bietet vorgefertigte L\xf6sungen f\xfcr wiederkehrende Designprobleme und Interaktionsmuster, die in einer Anwendung auftreten k\xf6nnen. Diese UI-Patterns, wie beispielsweise Dropdown-Men\xfcs, Suchfelder, Tabellen, Modals usw., werden entwickelt, um bew\xe4hrte Design- und Interaktionsmuster bereitzustellen, die die Benutzererfahrung verbessern und die Konsistenz f\xf6rdern.\\n\\n4. Style-Guide: Ein Style-Guide ist ein wichtiges Element eines Designsystems. Er enth\xe4lt detaillierte Informationen \xfcber die visuellen Elemente des Designs, wie Farben, Schriftarten, Abst\xe4nde, Schattierungen, Gr\xf6\xdfenverh\xe4ltnisse und andere Designattribute. Der Style-Guide dient als Referenz f\xfcr Designer und Entwickler, um sicherzustellen, dass das Design konsistent umgesetzt wird und eine einheitliche visuelle \xc4sthetik beibehalten wird.\\n\\n5. Governance und Dokumentation: Ein Designsystem umfasst auch Governance-Praktiken, um sicherzustellen, dass das Designsystem effektiv verwaltet und gepflegt wird. Dazu geh\xf6rt die Definition von Rollen und Verantwortlichkeiten innerhalb des Designteams sowie die Dokumentation der Designentscheidungen, Prozesse und Versionierung des Designsystems. Eine klare Dokumentation ist unerl\xe4sslich, um den Designprozess zu unterst\xfctzen, die Zusammenarbeit zu f\xf6rdern und sicherzustellen, dass das Designsystem kontinuierlich verbessert und aktuell gehalten wird.\\n\\nDiese Merkmale erm\xf6glichen es einem Designsystem, ein konsistentes und effizientes Design \xfcber verschiedene Anwendungen, Plattformen und Kan\xe4le hinweg zu gew\xe4hrleisten. Sie f\xf6rdern die Zusammenarbeit zwischen Designern und Entwicklern und erleichtern die Skalierbarkeit und Wartung des Designs \xfcber die Zeit.\\n\\n## Sollte man eine Komponentenbibliothek mit einem Designsystem vereinen oder getrennt verwalten?\\n\\nDie Entscheidung, ob man eine Komponentenbibliothek mit einem Designsystem vereint oder getrennt verwaltet, h\xe4ngt von verschiedenen Faktoren ab, einschlie\xdflich der Gr\xf6\xdfe des Projekts, der Anforderungen des Designteams und der Organisationsstruktur. Es gibt Vor- und Nachteile f\xfcr beide Ans\xe4tze:\\n\\n1. Vereinigung von Komponentenbibliothek und Designsystem:\\n\\n   - Vorteile:\\n\\n     - Konsistenz: Eine enge Integration von Komponentenbibliothek und Designsystem erleichtert die Einhaltung der Designrichtlinien und f\xf6rdert eine konsistente Benutzererfahrung.\\n     - Effizienz: Designer und Entwickler haben Zugriff auf dieselben Ressourcen und Komponenten, was die Zusammenarbeit erleichtert und die Entwicklung beschleunigt.\\n     - Skalierbarkeit: Das Designsystem kann leicht um neue Komponenten erweitert werden, und \xc4nderungen im Designsystem k\xf6nnen automatisch auf die Komponentenbibliothek angewendet werden.\\n\\n   - Nachteile:\\n\\n     - Abh\xe4ngigkeiten: Eine enge Verkn\xfcpfung von Komponentenbibliothek und Designsystem kann dazu f\xfchren, dass \xc4nderungen in einem Bereich unerwartete Auswirkungen auf andere Bereiche haben.\\n     - Komplexit\xe4t: Die Verwaltung eines kombinierten Systems erfordert m\xf6glicherweise zus\xe4tzlichen Aufwand f\xfcr die Aktualisierung und Pflege.\\n\\n2. Getrennte Verwaltung von Komponentenbibliothek und Designsystem:\\n\\n   - Vorteile:\\n\\n     - Flexibilit\xe4t: Ein getrenntes Designsystem erm\xf6glicht eine gr\xf6\xdfere Flexibilit\xe4t bei der Anpassung und Entwicklung von Anwendungen, da die Komponenten unabh\xe4ngig vom Designsystem verwendet werden k\xf6nnen.\\n     - Unabh\xe4ngigkeit: \xc4nderungen im Designsystem haben keine direkten Auswirkungen auf die Komponentenbibliothek, und umgekehrt.\\n     - Modularit\xe4t: Eine getrennte Verwaltung kann die Modularit\xe4t f\xf6rdern, indem verschiedene Komponentenbibliotheken mit einem einzigen Designsystem kombiniert werden k\xf6nnen.\\n\\n   - Nachteile:\\n\\n     - Konsistenzherausforderungen: Die getrennte Verwaltung erfordert eine sorgf\xe4ltige Koordination, um sicherzustellen, dass die Komponenten die Designrichtlinien einhalten und eine konsistente Benutzererfahrung bieten.\\n     - Wiederholter Aufwand: Es kann erforderlich sein, bestimmte Designelemente und Komponenten in verschiedenen Komponentenbibliotheken zu duplizieren.\\n\\nLetztendlich sollte die Entscheidung auf Basis der spezifischen Anforderungen und Herausforderungen des Projekts getroffen werden. Eine enge Integration von Komponentenbibliothek und Designsystem kann Vorteile hinsichtlich Konsistenz und Effizienz bieten, erfordert jedoch m\xf6glicherweise eine sorgf\xe4ltige Verwaltung. Eine getrennte Verwaltung bietet mehr Flexibilit\xe4t, erfordert aber eine gute Koordination, um die Konsistenz sicherzustellen.\\n\\n## Warum sollte man ein Designsystem von einer Komponentenbibliothek entkoppeln?\\n\\nDas Entkoppeln eines Designsystems von einer Komponentenbibliothek bietet mehr Flexibilit\xe4t und Skalierbarkeit. Hier sind einige Gr\xfcnde:\\n\\n1. Unabh\xe4ngigkeit: Ein Designsystem sollte von spezifischen technischen Implementierungen entkoppelt sein, um die M\xf6glichkeit zu haben, es auf verschiedenen Plattformen und Technologien zu nutzen.\\n\\n2. Anpassungsf\xe4higkeit: Durch die Trennung von Designsystem und Komponentenbibliothek k\xf6nnen Design-Updates unabh\xe4ngig von den technischen Implementierungen vorgenommen werden. Das erm\xf6glicht eine schnellere Anpassung und Evolution des Designs.\\n\\n3. Wiederverwendbarkeit: Ein entkoppeltes Designsystem kann in verschiedenen Projekten und Produkten wiederverwendet werden, unabh\xe4ngig von den zugrunde liegenden Komponentenbibliotheken. Dadurch wird die Konsistenz \xfcber verschiedene Anwendungen hinweg gew\xe4hrleistet.\\n\\n4. Teamkollaboration: Wenn Design und Entwicklung unabh\xe4ngig voneinander arbeiten k\xf6nnen, wird die Zusammenarbeit zwischen den Teams erleichtert. Design kann sich auf die Gestaltung des Systems konzentrieren, w\xe4hrend Entwicklung die Komponentenbibliothek effizient umsetzt.\\n\\n5. Zukunftssicherheit: Technologien und Frameworks k\xf6nnen sich im Laufe der Zeit \xe4ndern. Indem das Designsystem von der Komponentenbibliothek entkoppelt wird, bleibt das Designsystem stabiler und weniger anf\xe4llig f\xfcr technische \xc4nderungen.\\n\\nDurch die Entkopplung des Designsystems von der Komponentenbibliothek kann man die Vorteile beider Ans\xe4tze optimal nutzen und ein flexibles, skalierbares und anpassungsf\xe4higes Designsystem aufbauen.\\n\\n## Weitere Artikel zum Thema\\n\\nF\xfcr die Betrachtung des Themas Komponentenbibliothek vs. Designsysteme aus anderen Perspektiven sind auch folgende Artikel lesenswert:\\n\\n- https://www.ramotion.com/blog/design-system-vs-component-library/#section-component-library-definition (EN)\\n- https://www.uxpin.com/studio/blog/design-systems-vs-pattern-libraries-vs-style-guides-whats-difference/ (EN)\\n\\n[ChatGPT]: https://chat.openai.com/"},{"id":"/2023/06/08/","metadata":{"permalink":"/blog/2023/06/08/","source":"@site/blog/2023-06-08.mdx","title":"Ank\xfcndigung Release 1.6","description":"WIP: Dieser Artikel wird immer wieder entwicklungsbegleitend aktualisiert.","date":"2023-06-08T00:00:00.000Z","formattedDate":"8. Juni 2023","tags":[{"label":"release","permalink":"/blog/tags/release"},{"label":"neuerungen","permalink":"/blog/tags/neuerungen"}],"readingTime":1.01,"hasTruncateMarker":false,"authors":[{"name":"Martin Oppitz","title":"Architekt@ITZBund & Creator of KoliBri","url":"https://github.com/deleonio","imageURL":"https://avatars.githubusercontent.com/u/6279703","key":"deleonio"}],"frontMatter":{"title":"Ank\xfcndigung Release 1.6","authors":"deleonio","tags":["release","neuerungen"]},"unlisted":false,"prevItem":{"title":"Komponentenbibliothek vs. Designsystem","permalink":"/blog/2023/06/28/"},"nextItem":{"title":"Wie kann ich einen eigenen Button-Typ hinzuf\xfcgen?","permalink":"/blog/2023/06/05/"}},"content":"import { KolLink } from \'@public-ui/react\';\\n\\n> **WIP:** Dieser Artikel wird immer wieder entwicklungsbegleitend aktualisiert.\\n\\n# Ank\xfcndigung - Release 1.6\\n\\nDie wichtigsten \xc4nderungen sind:\\n\\n- Verbesserungen\\n- Refactorings\\n  - Vereinheitlichung von Properties der Komponenten (siehe <KolLink _href=\\"/docs/concepts/properties\\" _label=\\"Eigenschaften\\" />-Konzept)\\n    - `_alignment` vom Popover in `_align` umbenannt\\n    - Typ `Alignment` wurde intern in `Align` umbenannt\\n    - `_label` wird in Version 2 folgende Properties ersetzen:\\n      - `_aria-label` von Breadcrumb, Button, ButtonLink, Icon, Link, LinkButton, Modal, Nav, SkipNav, SplitButton, Symbol und Tabs\\n      - `_caption` von Quote und Table\\n      - `_heading` von Accordion, Alert, Card und Toast\\n      - `_headline` von Card\\n      - `_quote` von Quote (?)\\n      - `_summary` von Details\\n      - `_symbol` von Symbol\\n      - `_title` von Abbr\\n    - Properties, die zuk\xfcnftig nicht mehr ben\xf6tigt werden\\n      - `_has-footer` von Card\\n      - `_height_` von Select\\n      - `_icon-align` ...\\n      - `_part` ...\\n      - `_show-dropdown` ...\\n- Expert-Slot\\n  - Alle Inputs-, Select- und Textarea-Komponenten haben nun einen Expert-Slot und das `_label` ist Pflicht. Wenn das `_label=\\"\\"` leer bleibt, dann wird das Label \xfcber den Slot, wie gewohnt angezeigt.\\n  - Code-Replacement - am besten einzeln ersetzen:\\n    - `(<Kol(Button|Button|Link|Heading|Input[^>]+|Link|LinkButton|Select|Textarea))>(\\\\n?\\\\t*)([^\\\\n]+)[^<]+<\\\\/Kol(Button|Button|Link|Heading|Input[^>]+|Link|LinkButton|Select|Textarea)>` -> `$1 _label=\\"$5\\" />`\\n- Theming\\n- Dokumentation\\n- Adapter\\n  - Vaadin: Optimierungen am Code-Generator\\n  - JSF: Verbesserung f\xfcr statische/klassische Formulare (experimental)"},{"id":"/2023/06/05/","metadata":{"permalink":"/blog/2023/06/05/","source":"@site/blog/2023-06-05.mdx","title":"Wie kann ich einen eigenen Button-Typ hinzuf\xfcgen?","description":"Im Grunde ist es so, dass jede Komponente innerhalb ihrere HTML-Struktur frei gestylt werden kann.","date":"2023-06-05T00:00:00.000Z","formattedDate":"5. Juni 2023","tags":[{"label":"theming","permalink":"/blog/tags/theming"},{"label":"styling","permalink":"/blog/tags/styling"},{"label":"button","permalink":"/blog/tags/button"}],"readingTime":1.78,"hasTruncateMarker":false,"authors":[{"name":"Martin Oppitz","title":"Architekt@ITZBund & Creator of KoliBri","url":"https://github.com/deleonio","imageURL":"https://avatars.githubusercontent.com/u/6279703","key":"deleonio"}],"frontMatter":{"authors":"deleonio","tags":["theming","styling","button"]},"unlisted":false,"prevItem":{"title":"Ank\xfcndigung Release 1.6","permalink":"/blog/2023/06/08/"},"nextItem":{"title":"Wie kann ich Icons im Theme \xe4ndern?","permalink":"/blog/2023/05/12/"}},"content":"import { KolButton, KolLink } from \'@public-ui/react\';\\n\\n\\nIm Grunde ist es so, dass jede Komponente innerhalb ihrere HTML-Struktur frei gestylt werden kann.\\n\\nMit Hilfe unsereres Designers oder dem SCSS-Script k\xf6nnen vorhandene Themes angepasst oder eigenes Theme erstellt werden.\\n\\n- [Designer](/docs/concepts/styling/designer)\\n- [SCSS-Script](/docs/concepts/styling/scss)\\n\\n## Button und Custom-Class\\n\\nBeim Button/Schalter gibt es 5 Typen, die von der Design Sprache der Design Systeme abgeleitet wurden:\\n\\n- primary: Schalter f\xfcr Hauptaktion (z.B. speichern)\\n- secondary: Schalter f\xfcr Sekund\xe4raktion (z.B. abbrechen)\\n- normal/tertiary: Schalter f\xfcr Terti\xe4raktion (z.B. zur\xfcck)\\n- danger: Schalter f\xfcr \\"\u201egef\xe4hrliche\u201d Aktionen (z.B. l\xf6schen)\\n- ghost:Schalter f\xfcr \\"unscheinbare\u201d Aktionen (z.B. Hilfe)\\n\\nNeben diesen Basis-Typen k\xf6nnen noch weiterer Typen mittels Custom-Class hinzugef\xfcgt werden.\\nDazu m\xfcssen jedoch alle Custom-Classes im CSS des Theme hinterlegt werden.\\n\\n<kol-details _label=\\"Warum?\\" _open>\\n\\tIn der Umsetzung soll ein abgestimmtes Design System / Design Sprache nicht willk\xfcrlich ge\xe4ndert oder erweitert\\n\\twerden. Alle definierten Custom-Buttons werden schon bei der Erstellung des Themes bereitgestellt und deren Verwendung\\n\\tin der Dokumentation des eigenen Design Systems beschrieben.\\n</kol-details>\\n\\n### Custom-Class im Theme hinterlegen\\n\\n1. Theme-Designer \xf6ffnen\\n2. Theme ausw\xe4hlen\\n3. Button-Komponente ausw\xe4hlen\\n4. Schalter auf Komponent-Styling umstellen\\n5. CSS f\xfcr den Custom-Button eintragen und speichern (bei `primary` abschauen)\\n6. Theme in Projekt \xfcbernehmen\\n\\nBeispiel f\xfcr Custom-Class `loading`:\\n\\n```css\\n.loading :is(a, button) > kol-span-wc kol-icon {\\n\\tanimation: spin 2.5s infinite linear;\\n\\tdisplay: block;\\n}\\n/* https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion#toning_down_the_animation_scaling */\\n@media (prefers-reduced-motion) {\\n\\t.loading :is(a, button) > kol-span-wc kol-icon {\\n\\t\\tanimation-duration: 5s;\\n\\t}\\n}\\n@keyframes spin {\\n\\tfrom {\\n\\t\\ttransform: rotate(0deg);\\n\\t}\\n\\tto {\\n\\t\\ttransform: rotate(360deg);\\n\\t}\\n}\\n```\\n\\n### Custom-Class verwenden\\n\\nUm in den Custom-Modus zu schalten, muss das Property `_variant` auf `custom` gesetzt werden. Danach\\nk\xf6nnen \xfcber das Property `_custom-class` beliebige vordefinierte Custom-Classes \xfcbergeben werden.\\n\\n```html\\n<kol-button _custom-class=\\"loading\\" _label=\\"Speichern\\" variant=\\"custom\\"></kol-button>\\n```\\n\\n## Icon im Button von au\xdfen stylen\\n\\nEs ist m\xf6glich dem Button einen Icon-Style zu \xfcbergeben. Dazu muss dem Property `_icon` der gew\xfcnschte Style \xfcbergeben werden.\\n\\n```tsx\\n<KolButton\\n\\t_icons={{\\n\\t\\tleft: {\\n\\t\\t\\ticon: \'codicon codicon-home\',\\n\\t\\t\\tstyle: {\\n\\t\\t\\t\\tcolor: \'red\',\\n\\t\\t\\t\\t\'font-size\': \'300%\',\\n\\t\\t\\t},\\n\\t\\t},\\n\\t}}\\n\\t_label=\\"Schalter mit gro\xdfen roten Icon\\"\\n></KolButton>\\n```\\n\\n<KolButton\\n\\t_icons={{\\n\\t\\tleft: {\\n\\t\\t\\ticon: \'codicon codicon-home\',\\n\\t\\t\\tstyle: {\\n\\t\\t\\t\\tcolor: \'red\',\\n\\t\\t\\t\\t\'font-size\': \'300%\',\\n\\t\\t\\t},\\n\\t\\t},\\n\\t}}\\n\\t_label=\\"Schalter mit gro\xdfen roten Icon\\"\\n></KolButton>"},{"id":"/2023/05/12/","metadata":{"permalink":"/blog/2023/05/12/","source":"@site/blog/2023-05-12.mdx","title":"Wie kann ich Icons im Theme \xe4ndern?","description":"Heute wollen wir in einem kurzen Blog-Post zeigen, wie Ihr die standardm\xe4\xdfig hinterlegten Icons \xfcber das Theming (Theme-Designer) \xe4ndern k\xf6nnt.","date":"2023-05-12T00:00:00.000Z","formattedDate":"12. Mai 2023","tags":[{"label":"theming","permalink":"/blog/tags/theming"},{"label":"icon","permalink":"/blog/tags/icon"},{"label":"font","permalink":"/blog/tags/font"}],"readingTime":2.09,"hasTruncateMarker":false,"authors":[{"name":"Martin Oppitz","title":"Architekt@ITZBund & Creator of KoliBri","url":"https://github.com/deleonio","imageURL":"https://avatars.githubusercontent.com/u/6279703","key":"deleonio"}],"frontMatter":{"authors":"deleonio","tags":["theming","icon","font"]},"unlisted":false,"prevItem":{"title":"Wie kann ich einen eigenen Button-Typ hinzuf\xfcgen?","permalink":"/blog/2023/06/05/"},"nextItem":{"title":"Ank\xfcndigung Release 1.5","permalink":"/blog/2023/05/03/"}},"content":"import { KolLink } from \'@public-ui/react\';\\n\\n\\nHeute wollen wir in einem kurzen Blog-Post zeigen, wie Ihr die standardm\xe4\xdfig hinterlegten Icons \xfcber das Theming (Theme-Designer) \xe4ndern k\xf6nnt.\\n\\n## 1. Icon-Font integrieren\\n\\nDamit Icons angezeigt werden k\xf6nnen, muss zun\xe4chst die gew\xfcnschte Icon-Font (z.B. Font Awesome Free) in der Webseite (HTML) eingebunden werden. Dies geschieht in der Regel mittels folgendem HTML:\\n\\n```html\\n<head>\\n\\t<link rel=\\"stylesheet\\" href=\\"assets/fontawesome-free/css/all.min.css\\" />\\n</head>\\n```\\n\\n## Icon-Font im Theme hinterlegen\\n\\nDie Icon-Komponente von KoliBri kapselt die Icon-Font und muss daher die CSS-Definitionen von den im Design System ausgew\xe4hlten Icon-Identifier kennen.\\nDazu muss das CSS aus der gleichen CSS-Datei, wie aus 1., in das Theme kopiert und damit hinterlegt werden.\\n\\n1. Theme-Designer \xf6ffnen\\n2. Theme ausw\xe4hlen\\n3. Icon-Komponente ausw\xe4hlen\\n4. Schalter auf Komponent-Styling umstellen\\n5. CSS aus der Icon-Font einf\xfcgen und speichern\\n6. Theme in Projekt \xfcbernehmen\\n\\n## Standard-Icons im Theme \xe4ndern\\n\\nDas \xc4ndern eines Icons ist ganz einfach, wenn folgendes Prinzip klar ist. Alle Icons werden durch die Web Component `kol-icon` abgebildet. Diese Komponente\\nexportiert immer den Part `icon`. \xdcber einen Part kann man auf festgelegte CSS-Eigenschaften innerhalb einer Web Component zugreifen. Exemplarisch sieht das\\nso aus:\\n\\n```css\\nkol-icon::part(icon) {\\n\\tfont-family: \'Font Awesome 6 Free\';\\n\\tfont-weight: 900;\\n}\\nkol-icon::part(icon):before {\\n\\tcontent: \'\ud83d\ude03\';\\n}\\n```\\n\\nUm ein Icon \xfcber den Designer zu \xe4ndern, sind folgende Schritte zu durchlaufen:\\n\\n1. Theme-Designer \xf6ffnen\\n2. Theme ausw\xe4hlen\\n3. Komponente ausw\xe4hlen, wo ein Icon ge\xe4ndert werden soll\\n4. Schalter auf Komponent-Styling umstellen\\n5. Spezifischen Selektor auf ein Icon ermitteln\\n6. Spezifischen Selektor verwenden, um Schriftart und Content anzupassen\\n7. Komponent-CSS speichern\\n8. Theme in Projekt \xfcbernehmen\\n\\nHier mal ein komplexeres Beispiel f\xfcr die Pagination:\\n\\n```css\\nkol-button::part(icon) {\\n\\tfont-family: \'Font Awesome 6 Free\';\\n\\tfont-weight: 900;\\n}\\nkol-button.first::part(icon):before,\\nkol-button.previous::part(icon):before,\\nkol-button.next::part(icon):before,\\nkol-button.last::part(icon):before {\\n\\tcontent: \'\ud83d\ude03\';\\n}\\n```\\n\\n## FAQ\\n\\n### Warum h\xe4ngt das Icon im KolIcon etwas tiefer?\\n\\nMit der CSS-Definition `display: contents;` am `kol-icon`-Tag wird das Icon passend ausgerichtet. Die Ausrichtung der Icon-Komponente innerhalb anderer Komponenten h\xe4ngt immer von der jeweiligen Verwendung ab.\\n\\n### Warum kann ich die Schriftgr\xf6\xdfe nicht \xe4ndern?\\n\\n```css\\nkol-icon::part(icon) {\\n\\tfont-family: \'Font Awesome 6 Free\';\\n\\tfont-size: 2rem !important;\\n\\tfont-weight: 900;\\n}\\n```\\n\\nDer Grund liegt in der `font` CSS-Definition in der Icon-Font selbst und in der Notwendigkeit, die Schriftgr\xf6\xdfe\\nbei Icons von Au\xdfen setzen \xfcbernehmen (erben).\\n\\n```css\\n.codicon[class*=\'codicon-\'] {\\n\\tfont: 16px / 1 codicon;\\n}\\n:host > i,\\n:host > i::before {\\n\\tfont-size: inherit !important;\\n}\\n```\\n\\nM\xf6chte man ein Icon in seiner Gr\xf6\xdfe anpassen, so kann man das einfach von Au\xdfen tun.\\n\\n```css\\nkol-icon {\\n\\tfont-size: 2rem;\\n}\\n```"},{"id":"/2023/05/03/","metadata":{"permalink":"/blog/2023/05/03/","source":"@site/blog/2023-05-03.mdx","title":"Ank\xfcndigung Release 1.5","description":"Das Release 1.5 wird bald ver\xf6ffentlicht und bringt zahlreiche neue Komponenten, Verbesserungen und ein vereinfachtes Theming mit.","date":"2023-05-03T00:00:00.000Z","formattedDate":"3. Mai 2023","tags":[{"label":"release","permalink":"/blog/tags/release"},{"label":"neuerungen","permalink":"/blog/tags/neuerungen"}],"readingTime":4.195,"hasTruncateMarker":false,"authors":[{"name":"Martin Oppitz","title":"Architekt@ITZBund & Creator of KoliBri","url":"https://github.com/deleonio","imageURL":"https://avatars.githubusercontent.com/u/6279703","key":"deleonio"}],"frontMatter":{"title":"Ank\xfcndigung Release 1.5","authors":"deleonio","tags":["release","neuerungen"]},"unlisted":false,"prevItem":{"title":"Wie kann ich Icons im Theme \xe4ndern?","permalink":"/blog/2023/05/12/"},"nextItem":{"title":"Wie style ich eine Komponente?","permalink":"/blog/2023/02/23/"}},"content":"import { KolLink } from \'@public-ui/react\';\\n\\n\\nDas Release 1.5 wird bald ver\xf6ffentlicht und bringt zahlreiche neue Komponenten, Verbesserungen und ein vereinfachtes Theming mit.\\n\\nDie wichtigsten \xc4nderungen sind:\\n\\n- Neue Komponenten\\n  - Image\\n  - Popover\\n  - SplitButton\\n  - ToggleButton (s. InputCheckbox)\\n  - Quote\\n- Verbesserungen\\n\\n  - Performance\\n    - Die Performance wurde durch die \xfcberdimensionierten CSS-Definitionen in der Icon-Komponente beeintr\xe4chtigt. Hintergrund sind die vielen Icon-Selectoren in den Icon-Fonts. F\xfcr ein Design System wird jedoch nur ein Bruchteil dieser CSS-Definitionen wirklich ben\xf6tigt. F\xfcr die Komponenten haben wir uns f\xfcr die schlanke Icon-Font von Visual Studio Code (Codicon) entschieden und Icofont und Font-Awesome standardm\xe4\xdfig entfernt (kann wieder nachger\xfcstet werden). Somit bringt dieses Release eine erhebliche Performance-Verbesserung beim Rendern der Komponenten mit sich.\\n  - Assets (Fonts und Icons)\\n\\n    - Versionen der Icon-Fonts wurden aktualisiert\\n    - Assets wurden auf die Themes aufgeteilt, wo sie relevant sind. Dadurch k\xf6nnen die KoliBri-Artefakt (NPM-Paket) verkleinert und somit schneller heruntergeladen und installiert werden.\\n    - Durch das Hinterlegen eines Postinstall-Scripts k\xf6nnen die Assets nach jeder Installation der KoliBri-Pakete automatisch in den `public/assets`-Ordner kopiert werden.\\n      ```json\\n      \\t// package.json\\n      \\t\\"scripts\\": {\\n      \\t\\t\u2026\\n      \\t\\t\\"postinstall\\": \\"npm-run-all postinstall:*\\",\\n      \\t\\t\\"postinstall:components-assets\\": \\"cpy \\\\\\"node_modules/@public-ui/components/assets/**/*\\\\\\" public/assets --dot\\",\\n      \\t\\t\\"postinstall:themes-assets\\": \\"cpy \\\\\\"node_modules/@public-ui/themes/assets/**/*\\\\\\" public/assets --dot\\",\\n      \\t},\\n      \\t\\"devDependencies\\": {\\n      \\t\\t\\"cpy-cli\\": \\"^4.2.0\\",\\n      \\t\\t\\"npm-run-all\\": \\"^4.1.5\\",\\n      \\t\\t\u2026\\n      \\t}\\n      ```\\n    - Anschlie\xdfend einem `npm i` (`pnpm i`) ausf\xfchren, damit alle Assets automatisch in den `public/assets`-Ordner kopiert werden.\\n    - Damit die Assets nicht mit eingecheckt werden m\xfcssen, kann man sie in der `.gitignore`-Datei ausschlie\xdfen.\\n      ```gitignore\\n      # .gitignore\\n      /public/assets/bundes/\\n      /public/assets/codicons/\\n      /public/assets/fontawesome-free/\\n      /public/assets/icofont/\\n      /public/assets/kreon/\\n      /public/assets/material-icons/\\n      /public/assets/material-symbols/\\n      /public/assets/noto-sans/\\n      /public/assets/roboto/\\n      /public/assets/tabler-icons/\\n      /public/assets/kolibri.ico\\n      ```\\n    - Weitere Icon-Fonts wurden in Themes verwendet:\\n      - Microsoft Codicons\\n      - Google Material Icons\\n      - Google Material Symbols\\n      - Tabler Icons\\n\\n- Refactorings\\n\\n  - Ein paar Komponenten haben wir refactored, um die Funktionalit\xe4ten zu erweitern und die Wartbarkeit zu verbessern.\\n  - Accordion\\n    - Der Header des Accordions wird jetzt mittels KoliBri-Heading, -Button und -Span umgesetzt.\\n    - Accordions lassen sich jetzt auch animiert auf- und zuklappen.\\n  - Alert\\n    - Die Konstruktion der Alerts wurde \xfcberarbeitet, um die volle Flexibilit\xe4t f\xfcr die Gestaltung zu erm\xf6glichen.\\n  - Heading\\n    - Die Heading-Komponente wurde mit einem Expert-Slot versehen.\\n  - Inputs, Select und Textarea\\n    - Die Konstruktion aller Eingabefelder wurde \xfcberarbeitet, um die Gestaltbarkeit und Wartbarkeit zu verbessern.\\n  - Nav\\n    - Aufklappbare Untermen\xfcs haben jetzt einen separaten Expand-Button. So kann der eigentliche Men\xfcpunkt unabh\xe4ngig vom Auf- und Zuklappen verwendet werden.\\n    - Men\xfcpunkte k\xf6nnen jetzt Links, Buttons oder auch reiner Text sein.\\n  - Table\\n    Die Pagination befindet sich jetzt im DOM immer oben, um den blinden Nutzenden eine schnellere Navigation zu erm\xf6glichen. F\xfcr sehende Nutzende kann die Pagination \xfcber das Theming entweder \xfcber oder unter der Tabelle angezeigt werden.\\n  - Tabs\\n    - Die Tabs verwenden jetzt die KoliBri-Button-Komponente.\\n  - Tooltip\\n    - Der Tooltip ist nur f\xfcr die interne Verwendung in KoliBri-Komponenten gedacht. Um die Gestaltbarkeit zu verbessern, wird der Tooltip jetzt ohne Shadow-Root bereitgestellt. Sollte die Komponente au\xdferhalb von KoliBri verwendet werden, muss das Styling in das CSS-Styling des Projekts (Webseite, App) hinzugef\xfcgt werden.\\n  - Alle relevante Themes wurden bzgl. der Refactorings \xfcberarbeitet\\n\\n- Adapter\\n  - Neuer Adapter f\xfcr Angular 16 hinzugef\xfcgt\\n- KoliBri-CLI\\n  - Templates\\n    - Die Templates wurden \xfcberarbeitet und aktualisiert.\\n    - Angular-Template auf Version 16 aktualisiert\\n- Expert-Slot\\n  - Der Expert-Slot kann verwendet werden, um beliebiges HTML anstatt des Text-Labels auf eigene Verantwortung einf\xfcgen zu k\xf6nnen.\\n  - Bei der Einf\xfchrung eines Expert-Slots, wird in der Regel das Property `_label` Pflicht. Entweder enth\xe4lt das Label einen Text, der dann ohne Slot angezeigt wird. Oder es ist leer und der Expert-Slot wird aktiviert.\\n    ```html\\n    <kol-heading _label=\\"Inhalt einer H4-\xdcberschrift\\" _level=\\"4\\"></kol-heading>\\n    <kol-heading _label=\\"\\" _level=\\"4\\">\\n    \\t<span slot=\\"expert\\"> Inhalt einer H4-\xdcberschrift \u2026 </span>\\n    </kol-heading>\\n    ```\\n  - Heading: Die Heading erm\xf6glicht jetzt das Einf\xfcgen beliebiger Inhalte im Expert-Modus. Hierzu wurde das erforderliche Property `_label` eingef\xfchrt. L\xe4sst man das Property leer (`_label=\\"\\"`), wird er Expert-Slot aktiviert.\\n- Theming\\n  - Basis-Styling: Wir haben das CSS auf den Komponenten auf das Wesentliche reduziert. Das Styling beinhaltet prim\xe4r nur noch Layout-Definitionen ohne Farben, Abst\xe4nde und Tokens. Somit kann das Erstellen von eigenen Themes deutlich vereinfacht werden.\\n  - Alle unsere Themes wurden bez\xfcglich der neuen Basis-Styling-Definitionen angepasst und konnten dadurch deutlich vereinfacht werden.\\n  - Neue Themes\\n    - Theme der Europ\xe4ischen Kommission\\n    - Theme der Europ\xe4ischen Union\\n    - Theme f\xfcr die neue Version des Design System Zoll (v2)\\n    - Theme des Bundes Styleguides (Bundesregierung)\\n    - Theme des Bundeszentralamt f\xfcr Steuern (WIP)\\n    - Theme des Freistaats Th\xfcringen (f\xfcr Demozwecke)\\n- Dokumentation\\n  - Code-Beispiele\\n    - Es gibt eine Beispiel-Anwendung (<KolLink _href=\\"/sample-react/#/handout\\" _label=\\"Sample-App\\" _target=\\"samples\\" />) mit zahlreichen Code-Beispielen.\\n    - Code-Beispiele wurden erweitert und aktualisiert\\n    - Beispiel-Anwendung kann ausgecheckt und lokal gestartet werden (ist im KoliBri-Repository).\\n    - Code-Bespiele werden jetzt in der Dokumentation angezeigt.\\n    - Code-Beispiele beinhaltet eine Handout-Sicht f\xfcr Pr\xe4sentationen von Themes.\\n  - Texte\\n    - Die Texte wurde \xfcberarbeitet und aktualisiert.\\n    - Die Texte wurde auf Englisch \xfcbersetzt.\\n  - Live-Editor (beta): Alle Komponenten k\xf6nnen jetzt live umkonfiguriert werden. Die \xc4nderungen werden daneben im Viewer direkt auf der Komponente angezeigt.\\n- Funktionalit\xe4ten\\n  - Der Link erm\xf6glicht jetzt die Angabe eines Dateinames f\xfcr den Download-Link.\\n  - Der Progress kann jetzt auch den Fortschritt als lesbaren Text anzeigen und eine Bezeichnung haben."},{"id":"/2023/02/23/","metadata":{"permalink":"/blog/2023/02/23/","source":"@site/blog/2023-02-23.mdx","title":"Wie style ich eine Komponente?","description":"Am Beispiel der Badge-Komponente wollen wir einmal schauen, wie das Stylen funktioniert.","date":"2023-02-23T00:00:00.000Z","formattedDate":"23. Februar 2023","tags":[{"label":"theme","permalink":"/blog/tags/theme"},{"label":"tutorial","permalink":"/blog/tags/tutorial"}],"readingTime":1.74,"hasTruncateMarker":false,"authors":[{"name":"Martin Oppitz","title":"Architekt@ITZBund & Creator of KoliBri","url":"https://github.com/deleonio","imageURL":"https://avatars.githubusercontent.com/u/6279703","key":"deleonio"}],"frontMatter":{"title":"Wie style ich eine Komponente?","authors":"deleonio","tags":["theme","tutorial"]},"unlisted":false,"prevItem":{"title":"Ank\xfcndigung Release 1.5","permalink":"/blog/2023/05/03/"},"nextItem":{"title":"Eigene Themes unabh\xe4ngig umsetzen","permalink":"/blog/2023/02/02/"}},"content":"import { KolLink, KolTable } from \'@public-ui/react\';\\n\\n\\nAm Beispiel der Badge-Komponente wollen wir einmal schauen, wie das Stylen funktioniert.\\n\\n## Herausforderung\\n\\nDie Badge-Komponente hat einen Smart-Button und der soll optisch kleiner aussehen, wie ein Button, der immer mindestens\\n44px hoch und breit ist.\\n\\n- [ ] Bild einf\xfcgen vorher\\n\\nWir sehen im nachfolgenden HTML-Snippet, dass der umschlie\xdfende Span die Badge-Hintergrundfarbe bestimmt. Da\\nder Button innerhalb des Span ist, wird die Hintergrundfarbe auch auf den Button gesetzt. Der Button muss\\nmindestens 44px hoch und breit sein, also wird auch der \xe4u\xdfere Span mindestens 44px hoch und breit.\\n**Das wollen wir nicht.**\\n\\n```html\\n<span class=\\"smart-button\\" style=\\"background-color: rgb(204, 222, 218); color: rgb(0, 78, 55);\\">\\n\\t<kol-span-wc class=\\"hydrated\\">\\n\\t\\t<span>\\n\\t\\t\\t<span>Badge mit Schalter</span>\\n\\t\\t</span>\\n\\t</kol-span-wc>\\n\\t<kol-button-wc _hide-label=\\"\\" class=\\"hydrated\\">\\n\\t\\t<button aria-labelledby=\\"cf22bf\\" class=\\"normal icon-only\\" type=\\"button\\">\\n\\t\\t\\t<kol-span-wc class=\\"icon-only hydrated\\" _hide-label=\\"\\">\\n\\t\\t\\t\\t<span>\\n\\t\\t\\t\\t\\t<kol-icon class=\\"icon left hydrated\\" style=\\"\\"></kol-icon>\\n\\t\\t\\t\\t</span>\\n\\t\\t\\t</kol-span-wc>\\n\\t\\t</button>\\n\\t\\t<kol-tooltip aria-hidden=\\"true\\" class=\\"hydrated\\">\\n\\t\\t\\t<div id=\\"floating\\" style=\\"left: 1233.91px; top: 312.5px; display: none; visibility: hidden;\\">\\n\\t\\t\\t\\t<div id=\\"arrow\\" style=\\"left: 19px; bottom: -5px;\\"></div>\\n\\t\\t\\t\\t<kol-badge id=\\"cf22bf\\" class=\\"hydrated\\" style=\\"\\"></kol-badge>\\n\\t\\t\\t</div>\\n\\t\\t</kol-tooltip>\\n\\t</kol-button-wc>\\n</span>\\n```\\n\\n## L\xf6sung\\n\\n### Idee 1\\n\\nWir optimieren die Komponente, indem wir die Hintergrundfarbe vom umschlie\xdfenden Span entfernen und auf die beiden\\ninneren Span-Elemente \xfcbertragen.\\n\\n```html\\n<span class=\\"smart-button\\" style=\\"color: rgb(0, 78, 55);\\">\\n\\t<kol-span-wc class=\\"hydrated\\" style=\\"background-color: rgb(204, 222, 218);\\">\\n\\t\\t<span>\\n\\t\\t\\t<span>Badge mit Schalter</span>\\n\\t\\t</span>\\n\\t</kol-span-wc>\\n\\t<kol-button-wc _hide-label=\\"\\" class=\\"hydrated\\">\\n\\t\\t<button aria-labelledby=\\"cf22bf\\" class=\\"normal icon-only\\" type=\\"button\\">\\n\\t\\t\\t<kol-span-wc class=\\"icon-only hydrated\\" _hide-label=\\"\\" style=\\"background-color: rgb(204, 222, 218);\\">\\n\\t\\t\\t\\t<span>\\n\\t\\t\\t\\t\\t<kol-icon class=\\"icon left hydrated\\" style=\\"\\"></kol-icon>\\n\\t\\t\\t\\t</span>\\n\\t\\t\\t</kol-span-wc>\\n\\t\\t</button>\\n\\t\\t<kol-tooltip aria-hidden=\\"true\\" class=\\"hydrated\\">\\n\\t\\t\\t<div id=\\"floating\\" style=\\"left: 1233.91px; top: 312.5px; display: none; visibility: hidden;\\">\\n\\t\\t\\t\\t<div id=\\"arrow\\" style=\\"left: 19px; bottom: -5px;\\"></div>\\n\\t\\t\\t\\t<kol-badge id=\\"cf22bf\\" class=\\"hydrated\\" style=\\"\\"></kol-badge>\\n\\t\\t\\t</div>\\n\\t\\t</kol-tooltip>\\n\\t</kol-button-wc>\\n</span>\\n```\\n\\n**Das geht aber nicht**, weil wir an den 2. Span nicht rankommen. Wir m\xfcssen also eine andere L\xf6sung finden.\\n\\n### Idee 2\\n\\nEs bleibt beim der initialen Komponenten-Konstruktion. Wir versuchen es mit CSS und erzwingen eine Zeilenh\xf6he f\xfcr\\nden umschlie\xdfenden Span.\\n\\n- [ ] Bild Heihgt 1.75rem einf\xfcgen\\n\\nWir sehen im Bild, dass der linke Rand des Button oben rausragt. Das k\xf6nnen wir aber leicht l\xf6sen, indem wir\\nden linken Rand des Buttons auf 0 setzen und stattdessen einen rechten Rand am Text-Span setzen."},{"id":"/2023/02/02/","metadata":{"permalink":"/blog/2023/02/02/","source":"@site/blog/2023-02-02.mdx","title":"Eigene Themes unabh\xe4ngig umsetzen","description":"Ein gro\xdfer Vorteil von KoliBri liegt in seiner besonders guten Wiederverwendbarkeit und hohen Flexiblit\xe4t. Denn auf","date":"2023-02-02T00:00:00.000Z","formattedDate":"2. Februar 2023","tags":[{"label":"theme","permalink":"/blog/tags/theme"},{"label":"style","permalink":"/blog/tags/style"},{"label":"styleguide","permalink":"/blog/tags/styleguide"},{"label":"corporate design","permalink":"/blog/tags/corporate-design"},{"label":"design system","permalink":"/blog/tags/design-system"}],"readingTime":3.67,"hasTruncateMarker":false,"authors":[{"name":"Martin Oppitz","title":"Architekt@ITZBund & Creator of KoliBri","url":"https://github.com/deleonio","imageURL":"https://avatars.githubusercontent.com/u/6279703","key":"deleonio"}],"frontMatter":{"title":"Eigene Themes unabh\xe4ngig umsetzen","authors":"deleonio","tags":["theme","style","styleguide","corporate design","design system"]},"unlisted":false,"prevItem":{"title":"Wie style ich eine Komponente?","permalink":"/blog/2023/02/23/"},"nextItem":{"title":"Button- und Link-Komponenten","permalink":"/blog/2023/01/09/"}},"content":"import { KolLink, KolTable } from \'@public-ui/react\';\\n\\n\\nEin gro\xdfer Vorteil von KoliBri liegt in seiner besonders guten Wiederverwendbarkeit und hohen Flexiblit\xe4t. Denn auf\\nBasis der semantisch barrierefreien Komponenten, in denen alle technische und gesetzliche Anforderungen umgesetzt\\nsind, k\xf6nnen eigene Themes unabh\xe4ngig erstellt werden.\\n\\n## R\xfcckblick\\n\\nKoliBri wurde als internes Projekt des ITZBund realisiert und hat sich nat\xfcrlich dabei anfangs vor allem auf die Bed\xfcrfnisse interner\\nProjekte fokussiert. Hierbei sind in erster Linie zahlreiche Themes umgesetzt worden, die nur intern Anwendung finden.\\n\\n<KolTable\\n\\t_label=\\"Liste ausgew\xe4hlter internen Themes\\"\\n\\t_headers={{\\n\\t\\thorizontal: [\\n\\t\\t\\t[\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tlabel: \'Name\',\\n\\t\\t\\t\\t\\twidth: \'5em\',\\n\\t\\t\\t\\t\\tkey: \'name\',\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tlabel: \'Verwendung\',\\n\\t\\t\\t\\t\\tkey: \'usage\',\\n\\t\\t\\t\\t},\\n\\t\\t\\t],\\n\\t\\t],\\n\\t}}\\n\\t_data={[\\n\\t\\t{\\n\\t\\t\\tname: \'BMF\',\\n\\t\\t\\tusage: \'Verwendung im BMF f\xfcr die Modernisierung der Haushaltsverfahren\',\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: \'DESY\',\\n\\t\\t\\tusage: \'Verwendung f\xfcr das Portal im Umfeld der Generalzolldirektion\',\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: \'MAPZoll\',\\n\\t\\t\\tusage: \'Verwendung f\xfcr das Mitarbeiterportal im Umfeld der Generalzolldirektion\',\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: \'Zoll\',\\n\\t\\t\\tusage: \'Verwendung f\xfcr das neue Mitarbeiterportal im Umfeld der Generalzolldirektion\',\\n\\t\\t},\\n\\t]}\\n/>\\n\\n<br />\\n\\nDar\xfcber hinaus wurden auch einige Themes zum Zwecke der Verbesserung umgesetzt, die als Proof-of-Concepts (PoC) dienten.\\n\\n<KolTable\\n\\t_label=\\"Liste ausgew\xe4hlter PoC-Themes\\"\\n\\t_headers={{\\n\\t\\thorizontal: [\\n\\t\\t\\t[\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tlabel: \'Name\',\\n\\t\\t\\t\\t\\twidth: \'5em\',\\n\\t\\t\\t\\t\\tkey: \'name\',\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tlabel: \'Verwendung\',\\n\\t\\t\\t\\t\\tkey: \'usage\',\\n\\t\\t\\t\\t},\\n\\t\\t\\t],\\n\\t\\t],\\n\\t}}\\n\\t_data={[\\n\\t\\t{\\n\\t\\t\\tname: \'BY\',\\n\\t\\t\\tusage:\\n\\t\\t\\t\\t\'Umsetzung des Online-Styleguides der Bayerischen Staatsregierung als Proof-of-Concept zur Verifizierung und Verbesserung der KoliBri-Komponenten\',\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: \'HH\',\\n\\t\\t\\tusage:\\n\\t\\t\\t\\t\'Umsetzung des Styleguides der Hansestadt Hamburg als Proof-of-Concept zur Verifizierung und Verbesserung der KoliBri-Komponenten\',\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: \'TH\',\\n\\t\\t\\tusage:\\n\\t\\t\\t\\t\'Umsetzung des Styleguides des Freistaates Th\xfcringens als Proof-of-Concept zur Verifizierung und Verbesserung der KoliBri-Komponenten\',\\n\\t\\t},\\n\\t]}\\n/>\\n\\n## Migration\\n\\nWir beschreiben jetzt hier in der Migration einfach mal, wie wir das im ITZBund exemplarisch umgesetzt haben, weil dass sicher\\nein interessanter Aspekt f\xfcr andere Beh\xf6rden, Organisationen und Unternehmen ist, wie sie eigene Themes intern bereitstellen\\nk\xf6nnen.\\n\\nIm Grunde haben wir ein neues Repository angelegt und ein Theme-Projekt erstellt (siehe n\xe4chsten Abschnitt), in dem wir alle\\ninternen Themes pflegen. Wir haben erstmal alle Themes in einem Repository, weil wir das f\xfcr die Entwicklung aktuell einfacher\\nfinden. Es ist aber auch m\xf6glich, die Themes in unterschiedlichen Repositories jeweils einzeln zu pflegen.\\n\\nMittels des TypeScript-Compilers wird das Theme-Projekt in ein JavaScript-Projekt kompiliert und als NPM-Paket <code>@itzbund/interne-kolibri-themes</code>\\nin unsere interne NPM-Registry versioniert gepublished.\\n\\nDamit die entwickelnden Projekte jetzt das neue Theme-Paket installieren und verwenden k\xf6nnen, muss zun\xe4chst die NPM-Konfiguration <code>.npmrc</code>\\nim Projekt-Verzeichnis erweitert und die neue Abh\xe4ngigkeit in die <code>package.json</code> hinzugef\xfcgt werden.\\n\\n**`.npmrc`** (kann mit im Projekt-Verzeichnis liegen oder im Home-Verzeichnis des Benutzers)\\n\\n```bash\\n@itzbund:registry=https://<URL-zur-internen-registry>\\n```\\n\\n**`package.json`** (im Projekt-Verzeichnis)\\n\\n```json\\n{\\n\\t\\"dependencies\\": {\\n\\t\\t\\"@itzbund/interne-kolibri-themes\\": \\"1.0.0\\"\\n\\t}\\n}\\n```\\n\\n## Eigenes Theme erstellen\\n\\nIn diesem Abschnitt wollen wir einen kurzen Einblick geben, wie einfach es ist, ein eigenes Theme zu erstellen.\\n\\n### Rationale\\n\\nEiner der wichtigsten Punkte, die man verstehen muss, liegt darin, dass KoliBri sich auf kleinteilige\\nh\xe4ufig wiederverwendete Komponenten konzentriert (mehr hierzu im <KolLink _href=\\"/docs/manifest\\" _label=\\"Manifest\\" />).\\nDas f\xfchrt dazu, dass wir uns vorallem auf standardisierbare Komponenten fokussieren. Deutlicher wird dies,\\nwenn wir uns vorstellen, eine redundante Umsetzung einer Basis-Komponente unter Beachtung der technischen und\\ngesetzlichen Anforderungen zu entwickeln und am Ende feststellen - die verh\xe4lt sich ja genauso, wie eine KoliBri-\\nKomponente und ist nahezu gleich semantisch aufgebaut. Insbesondere die technisch semantischen Vorgaben des W3C\\nf\xfcr die assistive Unterst\xfctzung (Barrierefreiheit) f\xf6rdern das Standardisierungspotenzial.\\n\\nWir k\xf6nnen somit von einer hohen \xdcberdeckung von Komponenten ausgehen, die allgemein jedes Design System oder\\nKomponenten-Bibliothek beinhalten und sich in der KoliBri-Sammlung verwendbar wiederfinden. Durch das Kompositionsprinzip\\nkann einfach die passende Teilmenge aus KoliBri ausgew\xe4hlt und wiederverwendet werden. Alle nicht vereinbarten Komponenten\\nk\xf6nnen unabh\xe4ngig von KoliBri und unternehmensspezifisch umgesetzt werden.\\n\\n> **Hinweis:** Es ist immer m\xf6glich eine Konstellation gegen die Wiederverwendung einer KoliBri-Komponenten aufzustellen,\\n> die auf die Abweichung von der Referenzimplementierung abzielt. Es ist nicht unsere Entscheidung ob die aufgezeigte\\n> Abweichung eine vollst\xe4ndige Eigenentwicklung wirtschaftlich und \xf6konomisch rechtfertigt. Wir bieten eine L\xf6sung an, die\\n> von alle frei und gepr\xfcft genutzt werden kann.\\n\\n### Umsetzung\\n\\nMit Hilfe der KoliBri-CLI (<code>npm init kolibri my-theme</code>) kann ein neues Theme-Projekt generiert werden. Das Theme-Projekt\\nist ein TypeScript-Projekt und beinhalten schon ein Dummy-Theme. Mit Hilfe des KoliBri-Designers kann dann ein Theme\\ninteraktiv auf den Basis-Komponenten erstellt, gespeichert, geladen und weiter gepflegt werden. Der vom Designer generierte Code wird\\neinfach in das Theme-Projekt kopiert und kann dann mit dem TypeScript-Compiler kompiliert werden. Anschlie\xdfend kann es mittels NPM\\neine interne oder in die \xf6ffentliche NPM-Registry gepublished werden."},{"id":"/2023/01/09/","metadata":{"permalink":"/blog/2023/01/09/","source":"@site/blog/2023-01-09.mdx","title":"Button- und Link-Komponenten","description":"Wir bieten heute die Varianten von Button, ButtonLink, Link und LinkButton an. Zuk\xfcnftig werden wir zus\xe4tzlich den ButtonToggle (Toogle-Button) anbieten. Optisch gibt es Buttons die genau wie Links aussehen und Links die genauso wie Buttons aussehen.","date":"2023-01-09T00:00:00.000Z","formattedDate":"9. Januar 2023","tags":[{"label":"button","permalink":"/blog/tags/button"},{"label":"link","permalink":"/blog/tags/link"}],"readingTime":2.915,"hasTruncateMarker":false,"authors":[{"name":"Martin Oppitz","title":"Architekt@ITZBund & Creator of KoliBri","url":"https://github.com/deleonio","imageURL":"https://avatars.githubusercontent.com/u/6279703","key":"deleonio"}],"frontMatter":{"title":"Button- und Link-Komponenten","authors":"deleonio","tags":["button","link"]},"unlisted":false,"prevItem":{"title":"Eigene Themes unabh\xe4ngig umsetzen","permalink":"/blog/2023/02/02/"},"nextItem":{"title":"\xdcbersetzungen","permalink":"/blog/2023/01/04/"}},"content":"Wir bieten heute die Varianten von Button, ButtonLink, Link und LinkButton an. Zuk\xfcnftig werden wir zus\xe4tzlich den ButtonToggle (Toogle-Button) anbieten. Optisch gibt es Buttons die genau wie Links aussehen und Links die genauso wie Buttons aussehen.\\n\\nIn der folgenden Tabelle wir eine \xdcbersicht \xfcber die Unterschiede dargestellt:\\n\\n|  Merkmal  | Link | LinkButton |  Button  | ButtonLink | ToogleButton<sup>\\\\*</sup> |\\n| :-------: | :--: | :--------: | :------: | :--------: | :-----------------------: |\\n|  Design   | Link |   Button   |  Button  |    Link    |          Button           |\\n| Semantik  | `a`  |    `a`     | `button` |  `button`  |          `input`          |\\n|  `_href`  |  \u2795  |     \u2795     |    \u2796    |     \u2796     |            \u2796             |\\n|   `_on`   |  \u2795  |     \u2795     |    \u2795    |     \u2795     |            \u2795             |\\n| `focus()` |  \u2795  |     \u2795     |    \u2795    |     \u2795     |            \u2795             |\\n|   Wert    |  \u2796  |     \u2796     |    \u2796    |     \u2796     |         `boolean`         |\\n\\n<small>\\n\\t<sup>*</sup> Der Toogle-Button wurde als Variante der Checkbox umgesetzt, weil es ein Schalter mit maximal zwei\\n\\tZust\xe4nden (entweder \\"an\\" oder \\"aus\\") ist.\\n</small>\\n\\n## Motivation\\n\\nKoliBri strebt neben einer hohe Standardkonformit\xe4t auch eine sehr gute Wiederverwendbarkeit (Developer Experience DX) an.\\nDiese wird durch die Einheitlichkeit zu den HTML-Attributen und dem sparsamen Umgang mit zus\xe4tzlichen Properties adressiert.\\n\\n> **Rationale:** Wenn wir bei einer Link-Komponente, die zum Navigieren gedacht ist, die beiden Verhalten **Navigieren** und **Klick ohne Navigieren**\\n> anbieten w\xfcrden, dann h\xe4tten wir einen Widerspruch im Verhalten. Auch bei der Verwendung in der Entwicklung m\xfcssten wir die Properties `_href` und `_on`\\n> optional machen und wir k\xf6nnten nicht mehr vor der Falschverwendung warnen (Statische Codepr\xfcfung).\\n\\n## Herausforderungen\\n\\nDiese strenge Auslegung kann dazu f\xfchren, dass es bei der Entwicklung mit anderen Bibliotheken und Frameworks zu Problemen kommt.\\nVor allem dann, wenn diese bei einem Link einen Klick erwarten.\\n\\n### React-Router\\n\\nDer React-Router bildet das Navigieren \xfcber Klicks ab. Bei der Verwendung mit der Link-Komponente gibt es unterschiedliche M\xf6glichkeiten der Implementierung.\\n\\n**Wrapping:**\\n\\n```tsx\\n<Link to=\\"/\\">\\n\\t<KolLink _href=\\"\\" _label={`Home`}/>\\n</Link>\\n<Link to=\\"/test\\">\\n\\t<KolLink _href=\\"\\" _label={`Test`}/>\\n</Link>\\n```\\n\\n**Per Klick:**\\n\\n```tsx\\n<KolButtonLink\\n\\t_label=\\"Home\\"\\n\\t_on={{\\n\\t\\tonClick: () => navigate(\\"/\\")\\n\\t}}\\n>\\n\\tHome\\n</KolButtonLink>\\n<KolButtonLink\\n\\t_label=\\"Test\\"\\n\\t_on={{\\n\\t\\tonClick: () => navigate(\\"/test\\")\\n\\t}}\\n>\\n\\tTest\\n</KolButtonLink>\\n```\\n\\n**React-Link:**\\n\\n```tsx\\n<KolLink\\n\\t_href=\\"\\"\\n\\t_label=\\"Home\\"\\n\\tonClick={() => navigate(\\"/\\")}\\n>\\n\\tHome\\n</KolLink>\\n<KolLink\\n\\t_href=\\"\\"\\n\\t_label=\\"Test\\"\\n\\tonClick={() => navigate(\\"/test\\")}\\n>\\n\\tTest\\n</KolLink>\\n```\\n\\n> **Hinweis:** `_href=\\"\\"` ist eigentlich nicht erlaubt.\\n\\nHier gibt es auch ein kleines Code-Beispiel zum <kol-link _href=\\"https://codesandbox.io/s/kolibri-sample-react-link-sample-1jgz8v?file=/src/Navigation.tsx:0-112\\" _label=\\"\\" _target=\\"sandbox\\" _label=\\"Navigieren mit React-Router\\"></kol-link>.\\n\\nDie angegebenen Beispiele zeigen, dass die Link- und ButtonLink-Komponente f\xfcr die direkte Nutzung mit React-Router geeignet sind. Allerdings wird die Link-Komponente auch innerhalb anderer KoliBri-Komponenten verwendet. **Wo das so nicht funktionieren w\xfcrde!**\\n\\n### Server-Side-Rendering\\n\\nDas Server-Side-Rendering ist sehr \xe4hnlich zum React-Router, weil dieser technisch sehr stark durch das Framework Remix getrieben ist.\\nRemix ist ein Framework zum Erstellen von hybriden Client- und Server-Side-Webapplications. Das hei\xdft die Implementierung unterscheiden sich nicht, ob ich die Anwendung sp\xe4ter als Client- oder Server-seitige Anwendung bauen m\xf6chte.\\nF\xfcr Server-Side-Anwendungen m\xfcssen die navigierenden Links mit einem Klick funktionieren, weil diese Anwendungen auf dem Server und nicht im Browser ausgef\xfchrt werden.\\n\\nUm die Wiederverwendbarkeit von KoliBri auch f\xfcr Server-Side-Webapplications zu gew\xe4hrleisten, muss der Seitenwechsel auch durch **Klick ohne Navigieren** m\xf6glich sein.\\n\\n## L\xf6sung\\n\\nUm die Herausforderungen zu l\xf6sen, werden alle Komponenten, denen Link-Definitionen \xfcbergeben werden, erweitert. Wenn diesen Komponenten wahlweise auch ButtonLink-Definitionen \xfcbergeben werden k\xf6nnen, dann k\xf6nnen diese auch Klicks abbilden ohne zu Navigieren, sehen aber optisch weiterhin wie Links aus.\\n\\nFolgende Komponenten m\xfcssen dazu noch erweitert werden:\\n\\n- Breadcrumb\\n- LinkGroup\\n- Nav\\n- SkipNav"},{"id":"/2023/01/04/","metadata":{"permalink":"/blog/2023/01/04/","source":"@site/blog/2023-01-04.mdx","title":"\xdcbersetzungen","description":"Als Open Source-Projekt ist es f\xfcr KoliBri wichtig eine Community rund","date":"2023-01-04T00:00:00.000Z","formattedDate":"4. Januar 2023","tags":[{"label":"website","permalink":"/blog/tags/website"},{"label":"seo","permalink":"/blog/tags/seo"},{"label":"spec","permalink":"/blog/tags/spec"}],"readingTime":0.675,"hasTruncateMarker":false,"authors":[{"name":"Martin Oppitz","title":"Architekt@ITZBund & Creator of KoliBri","url":"https://github.com/deleonio","imageURL":"https://avatars.githubusercontent.com/u/6279703","key":"deleonio"}],"frontMatter":{"title":"\xdcbersetzungen","authors":"deleonio","tags":["website","seo","spec"]},"unlisted":false,"prevItem":{"title":"Button- und Link-Komponenten","permalink":"/blog/2023/01/09/"}},"content":"Als Open Source-Projekt ist es f\xfcr KoliBri wichtig eine Community rund\\num das Thema barrierefreie Basis-Komponenten aufzubauen. Damit auch hierf\xfcr\\neine optimiale Zug\xe4nglichkeit gegeben ist, sollten alle technischen\\nSpezifikationen mindestens in **English** verf\xfcgbar sein. Wie auch in der\\nWissenschaft erm\xf6glicht das Feedback und Mitwirkung aus allen potenziellen\\nBereichen.\\n\\n## Ma\xdfnahmen\\n\\n### Englische Spezifikation\\n\\nDie technische Spezifikation wird automatisiert aus dem Quellcode generiert\\nund synchronisiert. Alle Informationen die wir aus dem Quellcode in die\\nSpezifikation \xfcberf\xfchren, wird in Zukunft ausschlie\xdflich in **English**\\nbereitgestellt.\\n\\nDas betrifft beispielsweise:\\n\\n- API-Spezifikation auf der Website\\n- Details in der IDE-Autovervollst\xe4ndigung\\n- Darstellungen die aus den Meta-Daten des Quellcodes generiert werden\\n\\n### Multilinguale Dokumentation\\n\\nDie Dokumentation wird in Zukunft (mittelfristig) alle Inhalte jeweils prim\xe4r in\\n**Deutsch** und sekund\xe4r in **English** bereitgestellt.\\n\\nDas betrifft beispielsweise:\\n\\n- Anleitungen, Konzepte, Beispiele uvm.\\n- Blog-Beitr\xe4ge"}]}')}}]);