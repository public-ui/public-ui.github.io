{"version":3,"names":["getAlignment","placement","split","getLengthFromAxis","axis","getSide","getMainAxisFromPlacement","includes","computeCoordsFromPlacement","_ref","rtl","reference","floating","commonX","x","width","commonY","y","height","mainAxis","length","commonAlign","side","isVertical","coords","computePosition","async","config","strategy","middleware","platform","validMiddleware","filter","Boolean","isRTL","rects","getElementRects","statefulPlacement","middlewareData","resetCount","i","name","fn","nextY","data","reset","initialPlacement","elements","nextX","evaluate","value","param","expandPaddingObject","padding","top","right","bottom","left","getSideObjectFromPadding","rectToClientRect","rect","detectOverflow","state","options","_await$platform$isEle","boundary","rootBoundary","elementContext","altBoundary","paddingObject","altContext","element","clippingClientRect","getClippingRect","isElement","contextElement","getDocumentElement","offsetParent","getOffsetParent","offsetScale","getScale","elementClientRect","convertOffsetParentRelativeRectToViewportRelativeRect","min","Math","max","within","min$1","max$1","arrow","arrowDimensions","getDimensions","isYAxis","minProp","maxProp","clientProp","endDiff","startDiff","arrowOffsetParent","clientSize","centerToReference","largestPossiblePadding","minPadding","maxPadding","center","offset","shouldAddOffset","alignmentOffset","centerOffset","oppositeSideMap","getOppositePlacement","replace","getAlignmentSides","alignment","mainAlignmentSide","main","cross","oppositeAlignmentMap","start","end","getOppositeAlignmentPlacement","getExpandedPlacements","oppositePlacement","getSideList","isStart","lr","rl","tb","bt","getOppositeAxisPlacements","flipAlignment","direction","list","map","concat","flip","_middlewareData$flip","checkMainAxis","crossAxis","checkCrossAxis","fallbackPlacements","specifiedFallbackPlacements","fallbackStrategy","fallbackAxisSideDirection","detectOverflowOptions","isBasePlacement","push","placements","overflow","overflows","overflowsData","every","_middlewareData$flip2","_overflowsData$filter","nextIndex","index","nextPlacement","resetPlacement","d","sort","a","b","_overflowsData$map$so","reduce","acc","convertValueToCoords","mainAxisMulti","crossAxisMulti","rawValue","alignmentAxis","diffCoords","getCrossAxis","shift","limiter","mainAxisCoord","crossAxisCoord","minSide","maxSide","limitedCoords","getWindow","node","_node$ownerDocument","ownerDocument","defaultView","window","getComputedStyle$1","getComputedStyle","isNode","Node","getNodeName","nodeName","toLowerCase","isHTMLElement","HTMLElement","Element","isShadowRoot","ShadowRoot","isOverflowElement","overflowX","overflowY","display","test","isTableElement","isContainingBlock","safari","isSafari","css","transform","perspective","containerType","backdropFilter","some","willChange","contain","CSS","supports","isLastTraversableNode","round","floor","createEmptyCoords","v","getCssDimensions","parseFloat","hasOffset","offsetWidth","offsetHeight","shouldFallback","$","unwrapElement","domElement","getBoundingClientRect","Number","isFinite","noOffsets","getVisualOffsets","isFixed","floatingOffsetParent","_win$visualViewport","_win$visualViewport2","win","visualViewport","offsetLeft","offsetTop","includeScale","isFixedStrategy","clientRect","scale","visualOffsets","offsetWin","currentIFrame","frameElement","iframeScale","iframeRect","clientLeft","paddingLeft","clientTop","paddingTop","document","documentElement","getNodeScroll","scrollLeft","scrollTop","pageXOffset","pageYOffset","isOffsetParentAnElement","scroll","offsets","offsetRect","getWindowScrollBarX","getDocumentRect","html","body","scrollWidth","clientWidth","scrollHeight","clientHeight","getParentNode","result","assignedSlot","parentNode","host","getNearestOverflowAncestor","getOverflowAncestors","scrollableAncestor","isBody","getViewportRect","visualViewportBased","getInnerBoundingClientRect","getClientRectFromClippingAncestor","clippingAncestor","hasFixedPositionAncestor","stopNode","position","getClippingElementAncestors","cache","cachedResult","get","el","currentContainingBlockComputedStyle","elementIsFixed","currentNode","computedStyle","currentNodeIsContaining","shouldDropCurrentNode","ancestor","set","elementClippingAncestors","this","_c","clippingAncestors","firstClippingAncestor","clippingRect","accRect","getTrueOffsetParent","polyfill","getContainingBlock","getRectRelativeToOffsetParent","getOffsetParentFn","getDimensionsFn","getClientRects","Array","from","observeMove","onMove","io","timeoutId","root","cleanup","clearTimeout","disconnect","refresh","skip","threshold","insetTop","insetRight","insetBottom","insetLeft","rootMargin","isFirstUpdate","handleObserve","entries","ratio","intersectionRatio","setTimeout","IntersectionObserver","e","observe","autoUpdate","update","ancestorScroll","ancestorResize","elementResize","ResizeObserver","layoutShift","animationFrame","referenceEl","ancestors","forEach","addEventListener","passive","cleanupIo","reobserveFrame","resizeObserver","firstEntry","target","unobserve","cancelAnimationFrame","requestAnimationFrame","frameId","prevRefRect","frameLoop","nextRefRect","removeEventListener","Map","mergedOptions","platformWithCache","computePosition$1"],"sources":["node_modules/.pnpm/@floating-ui+core@1.3.1/node_modules/@floating-ui/core/dist/floating-ui.core.esm.js","node_modules/.pnpm/@floating-ui+dom@1.4.3/node_modules/@floating-ui/dom/dist/floating-ui.dom.esm.js"],"sourcesContent":["function getAlignment(placement) {\n  return placement.split('-')[1];\n}\n\nfunction getLengthFromAxis(axis) {\n  return axis === 'y' ? 'height' : 'width';\n}\n\nfunction getSide(placement) {\n  return placement.split('-')[0];\n}\n\nfunction getMainAxisFromPlacement(placement) {\n  return ['top', 'bottom'].includes(getSide(placement)) ? 'x' : 'y';\n}\n\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  let {\n    reference,\n    floating\n  } = _ref;\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  const mainAxis = getMainAxisFromPlacement(placement);\n  const length = getLengthFromAxis(mainAxis);\n  const commonAlign = reference[length] / 2 - floating[length] / 2;\n  const side = getSide(placement);\n  const isVertical = mainAxis === 'x';\n  let coords;\n  switch (side) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[mainAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n    case 'end':\n      coords[mainAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n  return coords;\n}\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a reference element when it is given a certain positioning strategy.\n *\n * This export does not have any `platform` interface logic. You will need to\n * write one for the platform you are using Floating UI with.\n */\nconst computePosition = async (reference, floating, config) => {\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform\n  } = config;\n  const validMiddleware = middleware.filter(Boolean);\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));\n  let rects = await platform.getElementRects({\n    reference,\n    floating,\n    strategy\n  });\n  let {\n    x,\n    y\n  } = computeCoordsFromPlacement(rects, placement, rtl);\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let resetCount = 0;\n  for (let i = 0; i < validMiddleware.length; i++) {\n    const {\n      name,\n      fn\n    } = validMiddleware[i];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn({\n      x,\n      y,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform,\n      elements: {\n        reference,\n        floating\n      }\n    });\n    x = nextX != null ? nextX : x;\n    y = nextY != null ? nextY : y;\n    middlewareData = {\n      ...middlewareData,\n      [name]: {\n        ...middlewareData[name],\n        ...data\n      }\n    };\n    if (reset && resetCount <= 50) {\n      resetCount++;\n      if (typeof reset === 'object') {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform.getElementRects({\n            reference,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n        ({\n          x,\n          y\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n      }\n      i = -1;\n      continue;\n    }\n  }\n  return {\n    x,\n    y,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\n\nfunction evaluate(value, param) {\n  return typeof value === 'function' ? value(param) : value;\n}\n\nfunction expandPaddingObject(padding) {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    ...padding\n  };\n}\n\nfunction getSideObjectFromPadding(padding) {\n  return typeof padding !== 'number' ? expandPaddingObject(padding) : {\n    top: padding,\n    right: padding,\n    bottom: padding,\n    left: padding\n  };\n}\n\nfunction rectToClientRect(rect) {\n  return {\n    ...rect,\n    top: rect.y,\n    left: rect.x,\n    right: rect.x + rect.width,\n    bottom: rect.y + rect.height\n  };\n}\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary on each side.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nasync function detectOverflow(state, options) {\n  var _await$platform$isEle;\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    x,\n    y,\n    platform,\n    rects,\n    elements,\n    strategy\n  } = state;\n  const {\n    boundary = 'clippingAncestors',\n    rootBoundary = 'viewport',\n    elementContext = 'floating',\n    altBoundary = false,\n    padding = 0\n  } = evaluate(options, state);\n  const paddingObject = getSideObjectFromPadding(padding);\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = rectToClientRect(await platform.getClippingRect({\n    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),\n    boundary,\n    rootBoundary,\n    strategy\n  }));\n  const rect = elementContext === 'floating' ? {\n    ...rects.floating,\n    x,\n    y\n  } : rects.reference;\n  const offsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating));\n  const offsetScale = (await (platform.isElement == null ? void 0 : platform.isElement(offsetParent))) ? (await (platform.getScale == null ? void 0 : platform.getScale(offsetParent))) || {\n    x: 1,\n    y: 1\n  } : {\n    x: 1,\n    y: 1\n  };\n  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n    rect,\n    offsetParent,\n    strategy\n  }) : rect);\n  return {\n    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\n    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\n    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\n    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\n  };\n}\n\nconst min = Math.min;\nconst max = Math.max;\n\nfunction within(min$1, value, max$1) {\n  return max(min$1, min(value, max$1));\n}\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = options => ({\n  name: 'arrow',\n  options,\n  async fn(state) {\n    const {\n      x,\n      y,\n      placement,\n      rects,\n      platform,\n      elements\n    } = state;\n    // Since `element` is required, we don't Partial<> the type.\n    const {\n      element,\n      padding = 0\n    } = evaluate(options, state) || {};\n    if (element == null) {\n      return {};\n    }\n    const paddingObject = getSideObjectFromPadding(padding);\n    const coords = {\n      x,\n      y\n    };\n    const axis = getMainAxisFromPlacement(placement);\n    const length = getLengthFromAxis(axis);\n    const arrowDimensions = await platform.getDimensions(element);\n    const isYAxis = axis === 'y';\n    const minProp = isYAxis ? 'top' : 'left';\n    const maxProp = isYAxis ? 'bottom' : 'right';\n    const clientProp = isYAxis ? 'clientHeight' : 'clientWidth';\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n    const startDiff = coords[axis] - rects.reference[axis];\n    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));\n    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;\n\n    // DOM platform can return `window` as the `offsetParent`.\n    if (!clientSize || !(await (platform.isElement == null ? void 0 : platform.isElement(arrowOffsetParent)))) {\n      clientSize = elements.floating[clientProp] || rects.floating[length];\n    }\n    const centerToReference = endDiff / 2 - startDiff / 2;\n\n    // If the padding is large enough that it causes the arrow to no longer be\n    // centered, modify the padding so that it is centered.\n    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;\n    const minPadding = min(paddingObject[minProp], largestPossiblePadding);\n    const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);\n\n    // Make sure the arrow doesn't overflow the floating element if the center\n    // point is outside the floating element's bounds.\n    const min$1 = minPadding;\n    const max = clientSize - arrowDimensions[length] - maxPadding;\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n    const offset = within(min$1, center, max);\n\n    // If the reference is small enough that the arrow's padding causes it to\n    // to point to nothing for an aligned placement, adjust the offset of the\n    // floating element itself. This stops `shift()` from taking action, but can\n    // be worked around by calling it again after the `arrow()` if desired.\n    const shouldAddOffset = getAlignment(placement) != null && center != offset && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;\n    const alignmentOffset = shouldAddOffset ? center < min$1 ? min$1 - center : max - center : 0;\n    return {\n      [axis]: coords[axis] - alignmentOffset,\n      data: {\n        [axis]: offset,\n        centerOffset: center - offset + alignmentOffset\n      }\n    };\n  }\n});\n\nconst sides = ['top', 'right', 'bottom', 'left'];\nconst allPlacements = /*#__PURE__*/sides.reduce((acc, side) => acc.concat(side, side + \"-start\", side + \"-end\"), []);\n\nconst oppositeSideMap = {\n  left: 'right',\n  right: 'left',\n  bottom: 'top',\n  top: 'bottom'\n};\nfunction getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, side => oppositeSideMap[side]);\n}\n\nfunction getAlignmentSides(placement, rects, rtl) {\n  if (rtl === void 0) {\n    rtl = false;\n  }\n  const alignment = getAlignment(placement);\n  const mainAxis = getMainAxisFromPlacement(placement);\n  const length = getLengthFromAxis(mainAxis);\n  let mainAlignmentSide = mainAxis === 'x' ? alignment === (rtl ? 'end' : 'start') ? 'right' : 'left' : alignment === 'start' ? 'bottom' : 'top';\n  if (rects.reference[length] > rects.floating[length]) {\n    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);\n  }\n  return {\n    main: mainAlignmentSide,\n    cross: getOppositePlacement(mainAlignmentSide)\n  };\n}\n\nconst oppositeAlignmentMap = {\n  start: 'end',\n  end: 'start'\n};\nfunction getOppositeAlignmentPlacement(placement) {\n  return placement.replace(/start|end/g, alignment => oppositeAlignmentMap[alignment]);\n}\n\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\n  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => getAlignment(placement) === alignment), ...allowedPlacements.filter(placement => getAlignment(placement) !== alignment)] : allowedPlacements.filter(placement => getSide(placement) === placement);\n  return allowedPlacementsSortedByAlignment.filter(placement => {\n    if (alignment) {\n      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);\n    }\n    return true;\n  });\n}\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'autoPlacement',\n    options,\n    async fn(state) {\n      var _middlewareData$autoP, _middlewareData$autoP2, _placementsThatFitOnE;\n      const {\n        rects,\n        middlewareData,\n        placement,\n        platform,\n        elements\n      } = state;\n      const {\n        crossAxis = false,\n        alignment,\n        allowedPlacements = allPlacements,\n        autoAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const placements = alignment !== undefined || allowedPlacements === allPlacements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;\n      const currentPlacement = placements[currentIndex];\n      if (currentPlacement == null) {\n        return {};\n      }\n      const {\n        main,\n        cross\n      } = getAlignmentSides(currentPlacement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)));\n\n      // Make `computeCoords` start from the right place.\n      if (placement !== currentPlacement) {\n        return {\n          reset: {\n            placement: placements[0]\n          }\n        };\n      }\n      const currentOverflows = [overflow[getSide(currentPlacement)], overflow[main], overflow[cross]];\n      const allOverflows = [...(((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || []), {\n        placement: currentPlacement,\n        overflows: currentOverflows\n      }];\n      const nextPlacement = placements[currentIndex + 1];\n\n      // There are more placements to check.\n      if (nextPlacement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: nextPlacement\n          }\n        };\n      }\n      const placementsSortedByMostSpace = allOverflows.map(d => {\n        const alignment = getAlignment(d.placement);\n        return [d.placement, alignment && crossAxis ?\n        // Check along the mainAxis and main crossAxis side.\n        d.overflows.slice(0, 2).reduce((acc, v) => acc + v, 0) :\n        // Check only the mainAxis.\n        d.overflows[0], d.overflows];\n      }).sort((a, b) => a[1] - b[1]);\n      const placementsThatFitOnEachSide = placementsSortedByMostSpace.filter(d => d[2].slice(0,\n      // Aligned placements should not check their opposite crossAxis\n      // side.\n      getAlignment(d[0]) ? 2 : 3).every(v => v <= 0));\n      const resetPlacement = ((_placementsThatFitOnE = placementsThatFitOnEachSide[0]) == null ? void 0 : _placementsThatFitOnE[0]) || placementsSortedByMostSpace[0][0];\n      if (resetPlacement !== placement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: resetPlacement\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\nfunction getExpandedPlacements(placement) {\n  const oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];\n}\n\nfunction getSideList(side, isStart, rtl) {\n  const lr = ['left', 'right'];\n  const rl = ['right', 'left'];\n  const tb = ['top', 'bottom'];\n  const bt = ['bottom', 'top'];\n  switch (side) {\n    case 'top':\n    case 'bottom':\n      if (rtl) return isStart ? rl : lr;\n      return isStart ? lr : rl;\n    case 'left':\n    case 'right':\n      return isStart ? tb : bt;\n    default:\n      return [];\n  }\n}\nfunction getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {\n  const alignment = getAlignment(placement);\n  let list = getSideList(getSide(placement), direction === 'start', rtl);\n  if (alignment) {\n    list = list.map(side => side + \"-\" + alignment);\n    if (flipAlignment) {\n      list = list.concat(list.map(getOppositeAlignmentPlacement));\n    }\n  }\n  return list;\n}\n\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'flip',\n    options,\n    async fn(state) {\n      var _middlewareData$flip;\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement,\n        platform,\n        elements\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = 'bestFit',\n        fallbackAxisSideDirection = 'none',\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const side = getSide(placement);\n      const isBasePlacement = getSide(initialPlacement) === initialPlacement;\n      const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n      if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== 'none') {\n        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));\n      }\n      const placements = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n      if (checkMainAxis) {\n        overflows.push(overflow[side]);\n      }\n      if (checkCrossAxis) {\n        const {\n          main,\n          cross\n        } = getAlignmentSides(placement, rects, rtl);\n        overflows.push(overflow[main], overflow[cross]);\n      }\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }];\n\n      // One or more sides is overflowing.\n      if (!overflows.every(side => side <= 0)) {\n        var _middlewareData$flip2, _overflowsData$filter;\n        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;\n        const nextPlacement = placements[nextIndex];\n        if (nextPlacement) {\n          // Try next placement and re-run the lifecycle.\n          return {\n            data: {\n              index: nextIndex,\n              overflows: overflowsData\n            },\n            reset: {\n              placement: nextPlacement\n            }\n          };\n        }\n\n        // First, find the candidates that fit on the mainAxis side of overflow,\n        // then find the placement that fits the best on the main crossAxis side.\n        let resetPlacement = (_overflowsData$filter = overflowsData.filter(d => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;\n\n        // Otherwise fallback.\n        if (!resetPlacement) {\n          switch (fallbackStrategy) {\n            case 'bestFit':\n              {\n                var _overflowsData$map$so;\n                const placement = (_overflowsData$map$so = overflowsData.map(d => [d.placement, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0];\n                if (placement) {\n                  resetPlacement = placement;\n                }\n                break;\n              }\n            case 'initialPlacement':\n              resetPlacement = initialPlacement;\n              break;\n          }\n        }\n        if (placement !== resetPlacement) {\n          return {\n            reset: {\n              placement: resetPlacement\n            }\n          };\n        }\n      }\n      return {};\n    }\n  };\n};\n\nfunction getSideOffsets(overflow, rect) {\n  return {\n    top: overflow.top - rect.height,\n    right: overflow.right - rect.width,\n    bottom: overflow.bottom - rect.height,\n    left: overflow.left - rect.width\n  };\n}\nfunction isAnySideFullyClipped(overflow) {\n  return sides.some(side => overflow[side] >= 0);\n}\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'hide',\n    options,\n    async fn(state) {\n      const {\n        rects\n      } = state;\n      const {\n        strategy = 'referenceHidden',\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      switch (strategy) {\n        case 'referenceHidden':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              elementContext: 'reference'\n            });\n            const offsets = getSideOffsets(overflow, rects.reference);\n            return {\n              data: {\n                referenceHiddenOffsets: offsets,\n                referenceHidden: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        case 'escaped':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              altBoundary: true\n            });\n            const offsets = getSideOffsets(overflow, rects.floating);\n            return {\n              data: {\n                escapedOffsets: offsets,\n                escaped: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        default:\n          {\n            return {};\n          }\n      }\n    }\n  };\n};\n\nfunction getBoundingRect(rects) {\n  const minX = min(...rects.map(rect => rect.left));\n  const minY = min(...rects.map(rect => rect.top));\n  const maxX = max(...rects.map(rect => rect.right));\n  const maxY = max(...rects.map(rect => rect.bottom));\n  return {\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY\n  };\n}\nfunction getRectsByLine(rects) {\n  const sortedRects = rects.slice().sort((a, b) => a.y - b.y);\n  const groups = [];\n  let prevRect = null;\n  for (let i = 0; i < sortedRects.length; i++) {\n    const rect = sortedRects[i];\n    if (!prevRect || rect.y - prevRect.y > prevRect.height / 2) {\n      groups.push([rect]);\n    } else {\n      groups[groups.length - 1].push(rect);\n    }\n    prevRect = rect;\n  }\n  return groups.map(rect => rectToClientRect(getBoundingRect(rect)));\n}\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'inline',\n    options,\n    async fn(state) {\n      const {\n        placement,\n        elements,\n        rects,\n        platform,\n        strategy\n      } = state;\n      // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\n      // ClientRect's bounds, despite the event listener being triggered. A\n      // padding of 2 seems to handle this issue.\n      const {\n        padding = 2,\n        x,\n        y\n      } = evaluate(options, state);\n      const nativeClientRects = Array.from((await (platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference))) || []);\n      const clientRects = getRectsByLine(nativeClientRects);\n      const fallback = rectToClientRect(getBoundingRect(nativeClientRects));\n      const paddingObject = getSideObjectFromPadding(padding);\n      function getBoundingClientRect() {\n        // There are two rects and they are disjoined.\n        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\n          // Find the first rect in which the point is fully inside.\n          return clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom) || fallback;\n        }\n\n        // There are 2 or more connected rects.\n        if (clientRects.length >= 2) {\n          if (getMainAxisFromPlacement(placement) === 'x') {\n            const firstRect = clientRects[0];\n            const lastRect = clientRects[clientRects.length - 1];\n            const isTop = getSide(placement) === 'top';\n            const top = firstRect.top;\n            const bottom = lastRect.bottom;\n            const left = isTop ? firstRect.left : lastRect.left;\n            const right = isTop ? firstRect.right : lastRect.right;\n            const width = right - left;\n            const height = bottom - top;\n            return {\n              top,\n              bottom,\n              left,\n              right,\n              width,\n              height,\n              x: left,\n              y: top\n            };\n          }\n          const isLeftSide = getSide(placement) === 'left';\n          const maxRight = max(...clientRects.map(rect => rect.right));\n          const minLeft = min(...clientRects.map(rect => rect.left));\n          const measureRects = clientRects.filter(rect => isLeftSide ? rect.left === minLeft : rect.right === maxRight);\n          const top = measureRects[0].top;\n          const bottom = measureRects[measureRects.length - 1].bottom;\n          const left = minLeft;\n          const right = maxRight;\n          const width = right - left;\n          const height = bottom - top;\n          return {\n            top,\n            bottom,\n            left,\n            right,\n            width,\n            height,\n            x: left,\n            y: top\n          };\n        }\n        return fallback;\n      }\n      const resetRects = await platform.getElementRects({\n        reference: {\n          getBoundingClientRect\n        },\n        floating: elements.floating,\n        strategy\n      });\n      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {\n        return {\n          reset: {\n            rects: resetRects\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\nasync function convertValueToCoords(state, options) {\n  const {\n    placement,\n    platform,\n    elements\n  } = state;\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n  const side = getSide(placement);\n  const alignment = getAlignment(placement);\n  const isVertical = getMainAxisFromPlacement(placement) === 'x';\n  const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\n  const rawValue = evaluate(options, state);\n\n  // eslint-disable-next-line prefer-const\n  let {\n    mainAxis,\n    crossAxis,\n    alignmentAxis\n  } = typeof rawValue === 'number' ? {\n    mainAxis: rawValue,\n    crossAxis: 0,\n    alignmentAxis: null\n  } : {\n    mainAxis: 0,\n    crossAxis: 0,\n    alignmentAxis: null,\n    ...rawValue\n  };\n  if (alignment && typeof alignmentAxis === 'number') {\n    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\n  }\n  return isVertical ? {\n    x: crossAxis * crossAxisMulti,\n    y: mainAxis * mainAxisMulti\n  } : {\n    x: mainAxis * mainAxisMulti,\n    y: crossAxis * crossAxisMulti\n  };\n}\n\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\nconst offset = function (options) {\n  if (options === void 0) {\n    options = 0;\n  }\n  return {\n    name: 'offset',\n    options,\n    async fn(state) {\n      const {\n        x,\n        y\n      } = state;\n      const diffCoords = await convertValueToCoords(state, options);\n      return {\n        x: x + diffCoords.x,\n        y: y + diffCoords.y,\n        data: diffCoords\n      };\n    }\n  };\n};\n\nfunction getCrossAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n}\n\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'shift',\n    options,\n    async fn(state) {\n      const {\n        x,\n        y,\n        placement\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = false,\n        limiter = {\n          fn: _ref => {\n            let {\n              x,\n              y\n            } = _ref;\n            return {\n              x,\n              y\n            };\n          }\n        },\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const mainAxis = getMainAxisFromPlacement(getSide(placement));\n      const crossAxis = getCrossAxis(mainAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      if (checkMainAxis) {\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n        const min = mainAxisCoord + overflow[minSide];\n        const max = mainAxisCoord - overflow[maxSide];\n        mainAxisCoord = within(min, mainAxisCoord, max);\n      }\n      if (checkCrossAxis) {\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n        const min = crossAxisCoord + overflow[minSide];\n        const max = crossAxisCoord - overflow[maxSide];\n        crossAxisCoord = within(min, crossAxisCoord, max);\n      }\n      const limitedCoords = limiter.fn({\n        ...state,\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      });\n      return {\n        ...limitedCoords,\n        data: {\n          x: limitedCoords.x - x,\n          y: limitedCoords.y - y\n        }\n      };\n    }\n  };\n};\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    options,\n    fn(state) {\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        middlewareData\n      } = state;\n      const {\n        offset = 0,\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const mainAxis = getMainAxisFromPlacement(placement);\n      const crossAxis = getCrossAxis(mainAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      const rawOffset = evaluate(offset, state);\n      const computedOffset = typeof rawOffset === 'number' ? {\n        mainAxis: rawOffset,\n        crossAxis: 0\n      } : {\n        mainAxis: 0,\n        crossAxis: 0,\n        ...rawOffset\n      };\n      if (checkMainAxis) {\n        const len = mainAxis === 'y' ? 'height' : 'width';\n        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\n        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\n        if (mainAxisCoord < limitMin) {\n          mainAxisCoord = limitMin;\n        } else if (mainAxisCoord > limitMax) {\n          mainAxisCoord = limitMax;\n        }\n      }\n      if (checkCrossAxis) {\n        var _middlewareData$offse, _middlewareData$offse2;\n        const len = mainAxis === 'y' ? 'width' : 'height';\n        const isOriginSide = ['top', 'left'].includes(getSide(placement));\n        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\n        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);\n        if (crossAxisCoord < limitMin) {\n          crossAxisCoord = limitMin;\n        } else if (crossAxisCoord > limitMax) {\n          crossAxisCoord = limitMax;\n        }\n      }\n      return {\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      };\n    }\n  };\n};\n\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'size',\n    options,\n    async fn(state) {\n      const {\n        placement,\n        rects,\n        platform,\n        elements\n      } = state;\n      const {\n        apply = () => {},\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const side = getSide(placement);\n      const alignment = getAlignment(placement);\n      const axis = getMainAxisFromPlacement(placement);\n      const isXAxis = axis === 'x';\n      const {\n        width,\n        height\n      } = rects.floating;\n      let heightSide;\n      let widthSide;\n      if (side === 'top' || side === 'bottom') {\n        heightSide = side;\n        widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';\n      } else {\n        widthSide = side;\n        heightSide = alignment === 'end' ? 'top' : 'bottom';\n      }\n      const overflowAvailableHeight = height - overflow[heightSide];\n      const overflowAvailableWidth = width - overflow[widthSide];\n      const noShift = !state.middlewareData.shift;\n      let availableHeight = overflowAvailableHeight;\n      let availableWidth = overflowAvailableWidth;\n      if (isXAxis) {\n        const maximumClippingWidth = width - overflow.left - overflow.right;\n        availableWidth = alignment || noShift ? min(overflowAvailableWidth, maximumClippingWidth) : maximumClippingWidth;\n      } else {\n        const maximumClippingHeight = height - overflow.top - overflow.bottom;\n        availableHeight = alignment || noShift ? min(overflowAvailableHeight, maximumClippingHeight) : maximumClippingHeight;\n      }\n      if (noShift && !alignment) {\n        const xMin = max(overflow.left, 0);\n        const xMax = max(overflow.right, 0);\n        const yMin = max(overflow.top, 0);\n        const yMax = max(overflow.bottom, 0);\n        if (isXAxis) {\n          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));\n        } else {\n          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));\n        }\n      }\n      await apply({\n        ...state,\n        availableWidth,\n        availableHeight\n      });\n      const nextDimensions = await platform.getDimensions(elements.floating);\n      if (width !== nextDimensions.width || height !== nextDimensions.height) {\n        return {\n          reset: {\n            rects: true\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\nexport { arrow, autoPlacement, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, rectToClientRect, shift, size };\n","import { rectToClientRect, computePosition as computePosition$1 } from '@floating-ui/core';\nexport { arrow, autoPlacement, detectOverflow, flip, hide, inline, limitShift, offset, shift, size } from '@floating-ui/core';\n\nfunction getWindow(node) {\n  var _node$ownerDocument;\n  return ((_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;\n}\n\nfunction getComputedStyle$1(element) {\n  return getWindow(element).getComputedStyle(element);\n}\n\nfunction isNode(value) {\n  return value instanceof getWindow(value).Node;\n}\nfunction getNodeName(node) {\n  if (isNode(node)) {\n    return (node.nodeName || '').toLowerCase();\n  }\n  // Mocked nodes in testing environments may not be instances of Node. By\n  // returning `#document` an infinite loop won't occur.\n  // https://github.com/floating-ui/floating-ui/issues/2317\n  return '#document';\n}\n\nfunction isHTMLElement(value) {\n  return value instanceof getWindow(value).HTMLElement;\n}\nfunction isElement(value) {\n  return value instanceof getWindow(value).Element;\n}\nfunction isShadowRoot(node) {\n  // Browsers without `ShadowRoot` support.\n  if (typeof ShadowRoot === 'undefined') {\n    return false;\n  }\n  return node instanceof getWindow(node).ShadowRoot || node instanceof ShadowRoot;\n}\nfunction isOverflowElement(element) {\n  const {\n    overflow,\n    overflowX,\n    overflowY,\n    display\n  } = getComputedStyle$1(element);\n  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !['inline', 'contents'].includes(display);\n}\nfunction isTableElement(element) {\n  return ['table', 'td', 'th'].includes(getNodeName(element));\n}\nfunction isContainingBlock(element) {\n  const safari = isSafari();\n  const css = getComputedStyle$1(element);\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n  return css.transform !== 'none' || css.perspective !== 'none' || (css.containerType ? css.containerType !== 'normal' : false) || !safari && (css.backdropFilter ? css.backdropFilter !== 'none' : false) || !safari && (css.filter ? css.filter !== 'none' : false) || ['transform', 'perspective', 'filter'].some(value => (css.willChange || '').includes(value)) || ['paint', 'layout', 'strict', 'content'].some(value => (css.contain || '').includes(value));\n}\nfunction isSafari() {\n  if (typeof CSS === 'undefined' || !CSS.supports) return false;\n  return CSS.supports('-webkit-backdrop-filter', 'none');\n}\nfunction isLastTraversableNode(node) {\n  return ['html', 'body', '#document'].includes(getNodeName(node));\n}\n\nconst min = Math.min;\nconst max = Math.max;\nconst round = Math.round;\nconst floor = Math.floor;\nconst createEmptyCoords = v => ({\n  x: v,\n  y: v\n});\n\nfunction getCssDimensions(element) {\n  const css = getComputedStyle$1(element);\n  // In testing environments, the `width` and `height` properties are empty\n  // strings for SVG elements, returning NaN. Fallback to `0` in this case.\n  let width = parseFloat(css.width) || 0;\n  let height = parseFloat(css.height) || 0;\n  const hasOffset = isHTMLElement(element);\n  const offsetWidth = hasOffset ? element.offsetWidth : width;\n  const offsetHeight = hasOffset ? element.offsetHeight : height;\n  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;\n  if (shouldFallback) {\n    width = offsetWidth;\n    height = offsetHeight;\n  }\n  return {\n    width,\n    height,\n    $: shouldFallback\n  };\n}\n\nfunction unwrapElement(element) {\n  return !isElement(element) ? element.contextElement : element;\n}\n\nfunction getScale(element) {\n  const domElement = unwrapElement(element);\n  if (!isHTMLElement(domElement)) {\n    return createEmptyCoords(1);\n  }\n  const rect = domElement.getBoundingClientRect();\n  const {\n    width,\n    height,\n    $\n  } = getCssDimensions(domElement);\n  let x = ($ ? round(rect.width) : rect.width) / width;\n  let y = ($ ? round(rect.height) : rect.height) / height;\n\n  // 0, NaN, or Infinity should always fallback to 1.\n\n  if (!x || !Number.isFinite(x)) {\n    x = 1;\n  }\n  if (!y || !Number.isFinite(y)) {\n    y = 1;\n  }\n  return {\n    x,\n    y\n  };\n}\n\nconst noOffsets = /*#__PURE__*/createEmptyCoords(0);\nfunction getVisualOffsets(element, isFixed, floatingOffsetParent) {\n  var _win$visualViewport, _win$visualViewport2;\n  if (isFixed === void 0) {\n    isFixed = true;\n  }\n  if (!isSafari()) {\n    return noOffsets;\n  }\n  const win = element ? getWindow(element) : window;\n  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== win) {\n    return noOffsets;\n  }\n  return {\n    x: ((_win$visualViewport = win.visualViewport) == null ? void 0 : _win$visualViewport.offsetLeft) || 0,\n    y: ((_win$visualViewport2 = win.visualViewport) == null ? void 0 : _win$visualViewport2.offsetTop) || 0\n  };\n}\n\nfunction getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {\n  if (includeScale === void 0) {\n    includeScale = false;\n  }\n  if (isFixedStrategy === void 0) {\n    isFixedStrategy = false;\n  }\n  const clientRect = element.getBoundingClientRect();\n  const domElement = unwrapElement(element);\n  let scale = createEmptyCoords(1);\n  if (includeScale) {\n    if (offsetParent) {\n      if (isElement(offsetParent)) {\n        scale = getScale(offsetParent);\n      }\n    } else {\n      scale = getScale(element);\n    }\n  }\n  const visualOffsets = getVisualOffsets(domElement, isFixedStrategy, offsetParent);\n  let x = (clientRect.left + visualOffsets.x) / scale.x;\n  let y = (clientRect.top + visualOffsets.y) / scale.y;\n  let width = clientRect.width / scale.x;\n  let height = clientRect.height / scale.y;\n  if (domElement) {\n    const win = getWindow(domElement);\n    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;\n    let currentIFrame = win.frameElement;\n    while (currentIFrame && offsetParent && offsetWin !== win) {\n      const iframeScale = getScale(currentIFrame);\n      const iframeRect = currentIFrame.getBoundingClientRect();\n      const css = getComputedStyle(currentIFrame);\n      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;\n      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;\n      x *= iframeScale.x;\n      y *= iframeScale.y;\n      width *= iframeScale.x;\n      height *= iframeScale.y;\n      x += left;\n      y += top;\n      currentIFrame = getWindow(currentIFrame).frameElement;\n    }\n  }\n  return rectToClientRect({\n    width,\n    height,\n    x,\n    y\n  });\n}\n\nfunction getDocumentElement(node) {\n  return ((isNode(node) ? node.ownerDocument : node.document) || window.document).documentElement;\n}\n\nfunction getNodeScroll(element) {\n  if (isElement(element)) {\n    return {\n      scrollLeft: element.scrollLeft,\n      scrollTop: element.scrollTop\n    };\n  }\n  return {\n    scrollLeft: element.pageXOffset,\n    scrollTop: element.pageYOffset\n  };\n}\n\nfunction convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {\n  let {\n    rect,\n    offsetParent,\n    strategy\n  } = _ref;\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  const documentElement = getDocumentElement(offsetParent);\n  if (offsetParent === documentElement) {\n    return rect;\n  }\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  let scale = createEmptyCoords(1);\n  const offsets = createEmptyCoords(0);\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== 'fixed') {\n    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isHTMLElement(offsetParent)) {\n      const offsetRect = getBoundingClientRect(offsetParent);\n      scale = getScale(offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    }\n  }\n  return {\n    width: rect.width * scale.x,\n    height: rect.height * scale.y,\n    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,\n    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y\n  };\n}\n\nfunction getWindowScrollBarX(element) {\n  // If <html> has a CSS width greater than the viewport, then this will be\n  // incorrect for RTL.\n  return getBoundingClientRect(getDocumentElement(element)).left + getNodeScroll(element).scrollLeft;\n}\n\n// Gets the entire size of the scrollable document area, even extending outside\n// of the `<html>` and `<body>` rect bounds if horizontally scrollable.\nfunction getDocumentRect(element) {\n  const html = getDocumentElement(element);\n  const scroll = getNodeScroll(element);\n  const body = element.ownerDocument.body;\n  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);\n  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);\n  let x = -scroll.scrollLeft + getWindowScrollBarX(element);\n  const y = -scroll.scrollTop;\n  if (getComputedStyle$1(body).direction === 'rtl') {\n    x += max(html.clientWidth, body.clientWidth) - width;\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\nfunction getParentNode(node) {\n  if (getNodeName(node) === 'html') {\n    return node;\n  }\n  const result =\n  // Step into the shadow DOM of the parent of a slotted node.\n  node.assignedSlot ||\n  // DOM Element detected.\n  node.parentNode ||\n  // ShadowRoot detected.\n  isShadowRoot(node) && node.host ||\n  // Fallback.\n  getDocumentElement(node);\n  return isShadowRoot(result) ? result.host : result;\n}\n\nfunction getNearestOverflowAncestor(node) {\n  const parentNode = getParentNode(node);\n  if (isLastTraversableNode(parentNode)) {\n    return node.ownerDocument ? node.ownerDocument.body : node.body;\n  }\n  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {\n    return parentNode;\n  }\n  return getNearestOverflowAncestor(parentNode);\n}\n\nfunction getOverflowAncestors(node, list) {\n  var _node$ownerDocument;\n  if (list === void 0) {\n    list = [];\n  }\n  const scrollableAncestor = getNearestOverflowAncestor(node);\n  const isBody = scrollableAncestor === ((_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.body);\n  const win = getWindow(scrollableAncestor);\n  if (isBody) {\n    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : []);\n  }\n  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor));\n}\n\nfunction getViewportRect(element, strategy) {\n  const win = getWindow(element);\n  const html = getDocumentElement(element);\n  const visualViewport = win.visualViewport;\n  let width = html.clientWidth;\n  let height = html.clientHeight;\n  let x = 0;\n  let y = 0;\n  if (visualViewport) {\n    width = visualViewport.width;\n    height = visualViewport.height;\n    const visualViewportBased = isSafari();\n    if (!visualViewportBased || visualViewportBased && strategy === 'fixed') {\n      x = visualViewport.offsetLeft;\n      y = visualViewport.offsetTop;\n    }\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\n// Returns the inner client rect, subtracting scrollbars if present.\nfunction getInnerBoundingClientRect(element, strategy) {\n  const clientRect = getBoundingClientRect(element, true, strategy === 'fixed');\n  const top = clientRect.top + element.clientTop;\n  const left = clientRect.left + element.clientLeft;\n  const scale = isHTMLElement(element) ? getScale(element) : createEmptyCoords(1);\n  const width = element.clientWidth * scale.x;\n  const height = element.clientHeight * scale.y;\n  const x = left * scale.x;\n  const y = top * scale.y;\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\nfunction getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {\n  let rect;\n  if (clippingAncestor === 'viewport') {\n    rect = getViewportRect(element, strategy);\n  } else if (clippingAncestor === 'document') {\n    rect = getDocumentRect(getDocumentElement(element));\n  } else if (isElement(clippingAncestor)) {\n    rect = getInnerBoundingClientRect(clippingAncestor, strategy);\n  } else {\n    const visualOffsets = getVisualOffsets(element);\n    rect = {\n      ...clippingAncestor,\n      x: clippingAncestor.x - visualOffsets.x,\n      y: clippingAncestor.y - visualOffsets.y\n    };\n  }\n  return rectToClientRect(rect);\n}\nfunction hasFixedPositionAncestor(element, stopNode) {\n  const parentNode = getParentNode(element);\n  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {\n    return false;\n  }\n  return getComputedStyle$1(parentNode).position === 'fixed' || hasFixedPositionAncestor(parentNode, stopNode);\n}\n\n// A \"clipping ancestor\" is an `overflow` element with the characteristic of\n// clipping (or hiding) child elements. This returns all clipping ancestors\n// of the given element up the tree.\nfunction getClippingElementAncestors(element, cache) {\n  const cachedResult = cache.get(element);\n  if (cachedResult) {\n    return cachedResult;\n  }\n  let result = getOverflowAncestors(element).filter(el => isElement(el) && getNodeName(el) !== 'body');\n  let currentContainingBlockComputedStyle = null;\n  const elementIsFixed = getComputedStyle$1(element).position === 'fixed';\n  let currentNode = elementIsFixed ? getParentNode(element) : element;\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {\n    const computedStyle = getComputedStyle$1(currentNode);\n    const currentNodeIsContaining = isContainingBlock(currentNode);\n    if (!currentNodeIsContaining && computedStyle.position === 'fixed') {\n      currentContainingBlockComputedStyle = null;\n    }\n    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === 'static' && !!currentContainingBlockComputedStyle && ['absolute', 'fixed'].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);\n    if (shouldDropCurrentNode) {\n      // Drop non-containing blocks.\n      result = result.filter(ancestor => ancestor !== currentNode);\n    } else {\n      // Record last containing block for next iteration.\n      currentContainingBlockComputedStyle = computedStyle;\n    }\n    currentNode = getParentNode(currentNode);\n  }\n  cache.set(element, result);\n  return result;\n}\n\n// Gets the maximum area that the element is visible in due to any number of\n// clipping ancestors.\nfunction getClippingRect(_ref) {\n  let {\n    element,\n    boundary,\n    rootBoundary,\n    strategy\n  } = _ref;\n  const elementClippingAncestors = boundary === 'clippingAncestors' ? getClippingElementAncestors(element, this._c) : [].concat(boundary);\n  const clippingAncestors = [...elementClippingAncestors, rootBoundary];\n  const firstClippingAncestor = clippingAncestors[0];\n  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {\n    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);\n    accRect.top = max(rect.top, accRect.top);\n    accRect.right = min(rect.right, accRect.right);\n    accRect.bottom = min(rect.bottom, accRect.bottom);\n    accRect.left = max(rect.left, accRect.left);\n    return accRect;\n  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));\n  return {\n    width: clippingRect.right - clippingRect.left,\n    height: clippingRect.bottom - clippingRect.top,\n    x: clippingRect.left,\n    y: clippingRect.top\n  };\n}\n\nfunction getDimensions(element) {\n  return getCssDimensions(element);\n}\n\nfunction getTrueOffsetParent(element, polyfill) {\n  if (!isHTMLElement(element) || getComputedStyle$1(element).position === 'fixed') {\n    return null;\n  }\n  if (polyfill) {\n    return polyfill(element);\n  }\n  return element.offsetParent;\n}\nfunction getContainingBlock(element) {\n  let currentNode = getParentNode(element);\n  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {\n    if (isContainingBlock(currentNode)) {\n      return currentNode;\n    } else {\n      currentNode = getParentNode(currentNode);\n    }\n  }\n  return null;\n}\n\n// Gets the closest ancestor positioned element. Handles some edge cases,\n// such as table ancestors and cross browser bugs.\nfunction getOffsetParent(element, polyfill) {\n  const window = getWindow(element);\n  if (!isHTMLElement(element)) {\n    return window;\n  }\n  let offsetParent = getTrueOffsetParent(element, polyfill);\n  while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === 'static') {\n    offsetParent = getTrueOffsetParent(offsetParent, polyfill);\n  }\n  if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle$1(offsetParent).position === 'static' && !isContainingBlock(offsetParent))) {\n    return window;\n  }\n  return offsetParent || getContainingBlock(element) || window;\n}\n\nfunction getRectRelativeToOffsetParent(element, offsetParent, strategy) {\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  const documentElement = getDocumentElement(offsetParent);\n  const isFixed = strategy === 'fixed';\n  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  const offsets = createEmptyCoords(0);\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isHTMLElement(offsetParent)) {\n      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    } else if (documentElement) {\n      offsets.x = getWindowScrollBarX(documentElement);\n    }\n  }\n  return {\n    x: rect.left + scroll.scrollLeft - offsets.x,\n    y: rect.top + scroll.scrollTop - offsets.y,\n    width: rect.width,\n    height: rect.height\n  };\n}\n\nconst platform = {\n  getClippingRect,\n  convertOffsetParentRelativeRectToViewportRelativeRect,\n  isElement,\n  getDimensions,\n  getOffsetParent,\n  getDocumentElement,\n  getScale,\n  async getElementRects(_ref) {\n    let {\n      reference,\n      floating,\n      strategy\n    } = _ref;\n    const getOffsetParentFn = this.getOffsetParent || getOffsetParent;\n    const getDimensionsFn = this.getDimensions;\n    return {\n      reference: getRectRelativeToOffsetParent(reference, await getOffsetParentFn(floating), strategy),\n      floating: {\n        x: 0,\n        y: 0,\n        ...(await getDimensionsFn(floating))\n      }\n    };\n  },\n  getClientRects: element => Array.from(element.getClientRects()),\n  isRTL: element => getComputedStyle$1(element).direction === 'rtl'\n};\n\n// https://samthor.au/2021/observing-dom/\nfunction observeMove(element, onMove) {\n  let io = null;\n  let timeoutId;\n  const root = getDocumentElement(element);\n  function cleanup() {\n    clearTimeout(timeoutId);\n    io && io.disconnect();\n    io = null;\n  }\n  function refresh(skip, threshold) {\n    if (skip === void 0) {\n      skip = false;\n    }\n    if (threshold === void 0) {\n      threshold = 1;\n    }\n    cleanup();\n    const {\n      left,\n      top,\n      width,\n      height\n    } = element.getBoundingClientRect();\n    if (!skip) {\n      onMove();\n    }\n    if (!width || !height) {\n      return;\n    }\n    const insetTop = floor(top);\n    const insetRight = floor(root.clientWidth - (left + width));\n    const insetBottom = floor(root.clientHeight - (top + height));\n    const insetLeft = floor(left);\n    const rootMargin = -insetTop + \"px \" + -insetRight + \"px \" + -insetBottom + \"px \" + -insetLeft + \"px\";\n    const options = {\n      rootMargin,\n      threshold: max(0, min(1, threshold)) || 1\n    };\n    let isFirstUpdate = true;\n    function handleObserve(entries) {\n      const ratio = entries[0].intersectionRatio;\n      if (ratio !== threshold) {\n        if (!isFirstUpdate) {\n          return refresh();\n        }\n        if (!ratio) {\n          timeoutId = setTimeout(() => {\n            refresh(false, 1e-7);\n          }, 100);\n        } else {\n          refresh(false, ratio);\n        }\n      }\n      isFirstUpdate = false;\n    }\n\n    // Older browsers don't support a `document` as the root and will throw an\n    // error.\n    try {\n      io = new IntersectionObserver(handleObserve, {\n        ...options,\n        // Handle <iframe>s\n        root: root.ownerDocument\n      });\n    } catch (e) {\n      io = new IntersectionObserver(handleObserve, options);\n    }\n    io.observe(element);\n  }\n  refresh(true);\n  return cleanup;\n}\n\n/**\n * Automatically updates the position of the floating element when necessary.\n * Should only be called when the floating element is mounted on the DOM or\n * visible on the screen.\n * @returns cleanup function that should be invoked when the floating element is\n * removed from the DOM or hidden from the screen.\n * @see https://floating-ui.com/docs/autoUpdate\n */\nfunction autoUpdate(reference, floating, update, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    ancestorScroll = true,\n    ancestorResize = true,\n    elementResize = typeof ResizeObserver === 'function',\n    layoutShift = typeof IntersectionObserver === 'function',\n    animationFrame = false\n  } = options;\n  const referenceEl = unwrapElement(reference);\n  const ancestors = ancestorScroll || ancestorResize ? [...(referenceEl ? getOverflowAncestors(referenceEl) : []), ...getOverflowAncestors(floating)] : [];\n  ancestors.forEach(ancestor => {\n    ancestorScroll && ancestor.addEventListener('scroll', update, {\n      passive: true\n    });\n    ancestorResize && ancestor.addEventListener('resize', update);\n  });\n  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;\n  let reobserveFrame = -1;\n  let resizeObserver = null;\n  if (elementResize) {\n    resizeObserver = new ResizeObserver(_ref => {\n      let [firstEntry] = _ref;\n      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {\n        // Prevent update loops when using the `size` middleware.\n        // https://github.com/floating-ui/floating-ui/issues/1740\n        resizeObserver.unobserve(floating);\n        cancelAnimationFrame(reobserveFrame);\n        reobserveFrame = requestAnimationFrame(() => {\n          resizeObserver && resizeObserver.observe(floating);\n        });\n      }\n      update();\n    });\n    if (referenceEl && !animationFrame) {\n      resizeObserver.observe(referenceEl);\n    }\n    resizeObserver.observe(floating);\n  }\n  let frameId;\n  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;\n  if (animationFrame) {\n    frameLoop();\n  }\n  function frameLoop() {\n    const nextRefRect = getBoundingClientRect(reference);\n    if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {\n      update();\n    }\n    prevRefRect = nextRefRect;\n    frameId = requestAnimationFrame(frameLoop);\n  }\n  update();\n  return () => {\n    ancestors.forEach(ancestor => {\n      ancestorScroll && ancestor.removeEventListener('scroll', update);\n      ancestorResize && ancestor.removeEventListener('resize', update);\n    });\n    cleanupIo && cleanupIo();\n    resizeObserver && resizeObserver.disconnect();\n    resizeObserver = null;\n    if (animationFrame) {\n      cancelAnimationFrame(frameId);\n    }\n  };\n}\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a reference element when it is given a certain CSS positioning\n * strategy.\n */\nconst computePosition = (reference, floating, options) => {\n  // This caches the expensive `getClippingElementAncestors` function so that\n  // multiple lifecycle resets re-use the same result. It only lives for a\n  // single call. If other functions become expensive, we can add them as well.\n  const cache = new Map();\n  const mergedOptions = {\n    platform,\n    ...options\n  };\n  const platformWithCache = {\n    ...mergedOptions.platform,\n    _c: cache\n  };\n  return computePosition$1(reference, floating, {\n    ...mergedOptions,\n    platform: platformWithCache\n  });\n};\n\nexport { autoUpdate, computePosition, getOverflowAncestors, platform };\n"],"mappings":"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"}