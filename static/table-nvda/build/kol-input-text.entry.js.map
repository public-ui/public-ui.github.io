{"version":3,"names":["validateAlert","component","value","watchBoolean","defaultStyleCss","featureHint","KolInputText","render","ariaDescribedBy","getRenderStates","this","state","hasList","Array","isArray","_list","length","showExpertSlot","_label","showDefaultSlot","h","Host","class","_hasValue","_type","_hideLabel","_currentLength","_disabled","_error","_hasCounter","_hint","_icon","_id","_maxLength","_readOnly","_required","_smartButton","_touched","onClick","_a","ref","focus","slot","name","Object","assign","catchRef","accessKey","_accessKey","join","undefined","autoCapitalize","autoComplete","_autoComplete","autoCorrect","disabled","id","list","maxlength","_name","pattern","_pattern","placeholder","_placeholder","readOnly","required","size","_size","spellcheck","title","type","_value","controller","onFacade","onKeyUp","constructor","hostRef","propagateFocus","host","disconnectedCallback","addEventListener","onChange","event","setState","target","code","propagateSubmitEventToForm","form","oldValue","_b","InputTextController","validateAccessKey","validateAutoComplete","validateDisabled","validateError","validateHasCounter","validateHideLabel","validateHint","validateIcon","validateId","validateLabel","validateList","validateMaxLength","validateName","validateOn","validatePattern","validatePlaceholder","validateReadOnly","validateRequired","validateSize","validateSmartButton","validateSyncValueBySelector","validateTabIndex","validateTouched","validateType","validateValue","componentWillLoad","_alert","addValueChangeListener","v","removeEventListener"],"sources":["src/types/props/alert.ts","src/components/input-text/style.css?tag=kol-input-text&mode=default&encapsulation=shadow","src/components/input-text/component.tsx"],"sourcesContent":["import { Generic } from '@a11y-ui/core';\r\n\r\nimport { watchBoolean } from '../../utils/prop.validators';\r\n\r\n/* types */\r\n/** de\r\n * Macht die Fehlermeldung dieses Elements von Screenreadern lesbar.\r\n */\r\n/** en\r\n * Makes hints readable for screenreaders.\r\n */\r\nexport type PropAlert = {\r\n\talert: boolean;\r\n};\r\n\r\n/* validator */\r\nexport const validateAlert = (component: Generic.Element.Component, value?: boolean): void => {\r\n\twatchBoolean(component, '_alert', value);\r\n};\r\n","@import url(../input-line.css);\n","import { Component, Element, h, Host, JSX, Prop, State, Watch } from '@stencil/core';\r\n\r\nimport { ButtonProps } from '../../types/button-link';\r\nimport { Stringified } from '../../types/common';\r\nimport { KoliBriHorizontalIcon } from '../../types/icon';\r\nimport { InputTextType } from '../../types/input/control/text';\r\nimport { InputTypeOnDefault, InputTypeOnOff } from '../../types/input/types';\r\nimport { validateAlert } from '../../types/props/alert';\r\nimport { validateHideLabel } from '../../types/props/hide-label';\r\nimport { LabelWithExpertSlotPropType } from '../../types/props/label';\r\nimport { featureHint } from '../../utils/a11y.tipps';\r\nimport { setState } from '../../utils/prop.validators';\r\nimport { propagateFocus } from '../../utils/reuse';\r\nimport { propagateSubmitEventToForm } from '../form/controller';\r\nimport { getRenderStates } from '../input/controller';\r\nimport { InputTextController } from './controller';\r\nimport { ComponentApi, States } from './types';\r\n\r\nfeatureHint(`[KolInputText] Pre- und post-Label für Währung usw.`);\r\n\r\n/**\r\n * @slot - Die Beschriftung des Eingabefeldes.\r\n */\r\n@Component({\r\n\ttag: 'kol-input-text',\r\n\tstyleUrls: {\r\n\t\tdefault: './style.css',\r\n\t},\r\n\tshadow: true,\r\n})\r\nexport class KolInputText implements ComponentApi {\r\n\t@Element() private readonly host?: HTMLKolInputTextElement;\r\n\tprivate ref?: HTMLInputElement;\r\n\tprivate oldValue?: string;\r\n\r\n\tprivate readonly catchRef = (ref?: HTMLInputElement) => {\r\n\t\tthis.ref = ref;\r\n\t\tpropagateFocus(this.host, this.ref);\r\n\t\tthis.disconnectedCallback();\r\n\t\tthis.ref?.addEventListener('search', this.onChange);\r\n\t};\r\n\r\n\tprivate readonly onKeyUp = (event: KeyboardEvent) => {\r\n\t\tsetState(this, '_currentLength', (event.target as HTMLInputElement).value.length);\r\n\t\tif (event.code === 'Enter' || event.code === 'NumpadEnter') {\r\n\t\t\tpropagateSubmitEventToForm({\r\n\t\t\t\tform: this.host,\r\n\t\t\t\tref: this.ref,\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tthis.onChange(event);\r\n\t\t}\r\n\t};\r\n\r\n\tprivate readonly onChange = (event: Event) => {\r\n\t\tif (this.oldValue !== this.ref?.value) {\r\n\t\t\tthis.oldValue = this.ref?.value;\r\n\t\t\tthis.controller.onFacade.onChange(event);\r\n\t\t}\r\n\t};\r\n\r\n\tpublic render(): JSX.Element {\r\n\t\tconst { ariaDescribedBy } = getRenderStates(this.state);\r\n\t\tconst hasList = Array.isArray(this.state._list) && this.state._list.length > 0;\r\n\t\tconst showExpertSlot = this.state._label === ''; // _label=\"\" or _label\r\n\t\tconst showDefaultSlot = this.state._label === '…'; // deprecated: default slot will be removed in v2.0.0\r\n\t\treturn (\r\n\t\t\t<Host\r\n\t\t\t\tclass={{\r\n\t\t\t\t\t'has-value': this.state._hasValue,\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t<kol-input\r\n\t\t\t\t\tclass={{\r\n\t\t\t\t\t\t[this.state._type]: true,\r\n\t\t\t\t\t\t'hide-label': !!this.state._hideLabel,\r\n\t\t\t\t\t}}\r\n\t\t\t\t\t_currentLength={this.state._currentLength}\r\n\t\t\t\t\t_disabled={this.state._disabled}\r\n\t\t\t\t\t_error={this.state._error}\r\n\t\t\t\t\t_hasCounter={this.state._hasCounter}\r\n\t\t\t\t\t_hideLabel={this.state._hideLabel}\r\n\t\t\t\t\t_hint={this.state._hint}\r\n\t\t\t\t\t_icon={this.state._icon}\r\n\t\t\t\t\t_id={this.state._id}\r\n\t\t\t\t\t_list={this.state._list}\r\n\t\t\t\t\t_maxLength={this.state._maxLength}\r\n\t\t\t\t\t_readOnly={this.state._readOnly}\r\n\t\t\t\t\t_required={this.state._required}\r\n\t\t\t\t\t_smartButton={this.state._smartButton}\r\n\t\t\t\t\t_touched={this.state._touched}\r\n\t\t\t\t\tonClick={() => this.ref?.focus()}\r\n\t\t\t\t>\r\n\t\t\t\t\t<span slot=\"label\">{showExpertSlot ? <slot name=\"expert\"></slot> : showDefaultSlot ? <slot></slot> : this.state._label}</span>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tref={this.catchRef}\r\n\t\t\t\t\t\taccessKey={this.state._accessKey}\r\n\t\t\t\t\t\taria-describedby={ariaDescribedBy.length > 0 ? ariaDescribedBy.join(' ') : undefined}\r\n\t\t\t\t\t\taria-labelledby={`${this.state._id}-label`}\r\n\t\t\t\t\t\tautoCapitalize=\"off\"\r\n\t\t\t\t\t\tautoComplete={this.state._autoComplete}\r\n\t\t\t\t\t\tautoCorrect=\"off\"\r\n\t\t\t\t\t\tdisabled={this.state._disabled}\r\n\t\t\t\t\t\tid={this.state._id}\r\n\t\t\t\t\t\tlist={hasList ? `${this.state._id}-list` : undefined}\r\n\t\t\t\t\t\tmaxlength={this.state._maxLength}\r\n\t\t\t\t\t\tname={this.state._name}\r\n\t\t\t\t\t\tpattern={this.state._pattern}\r\n\t\t\t\t\t\tplaceholder={this.state._placeholder}\r\n\t\t\t\t\t\treadOnly={this.state._readOnly}\r\n\t\t\t\t\t\trequired={this.state._required}\r\n\t\t\t\t\t\tsize={this.state._size}\r\n\t\t\t\t\t\tslot=\"input\"\r\n\t\t\t\t\t\tspellcheck=\"false\"\r\n\t\t\t\t\t\ttitle=\"\"\r\n\t\t\t\t\t\t// title={this.state._title}\r\n\t\t\t\t\t\ttype={this.state._type}\r\n\t\t\t\t\t\tvalue={this.state._value as string}\r\n\t\t\t\t\t\t{...this.controller.onFacade}\r\n\t\t\t\t\t\t// onInput={this.controller.onFacade.onChange}\r\n\t\t\t\t\t\tonKeyUp={this.onKeyUp}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</kol-input>\r\n\t\t\t</Host>\r\n\t\t);\r\n\t}\r\n\r\n\tprivate readonly controller: InputTextController;\r\n\r\n\t/**\r\n\t * Gibt an, mit welcher Tastenkombination man das interaktive Element der Komponente auslösen oder fokussieren kann.\r\n\t */\r\n\t@Prop() public _accessKey?: string;\r\n\r\n\t/**\r\n\t * Gibt an, ob der Screenreader die Meldung aktiv vorlesen soll.\r\n\t */\r\n\t@Prop({ mutable: true, reflect: true }) public _alert?: boolean = true;\r\n\r\n\t/**\r\n\t * Gibt an, ob das Eingabefeld autovervollständigt werden kann.\r\n\t */\r\n\t@Prop() public _autoComplete?: InputTypeOnOff;\r\n\r\n\t/**\r\n\t * Deaktiviert das interaktive Element in der Komponente und erlaubt keine Interaktion mehr damit.\r\n\t */\r\n\t@Prop() public _disabled?: boolean;\r\n\r\n\t/**\r\n\t * Gibt den Text für eine Fehlermeldung an.\r\n\t */\r\n\t@Prop() public _error?: string;\r\n\r\n\t/**\r\n\t * Aktiviert den Zeichenanzahlzähler am unteren Rand des Eingabefeldes.\r\n\t */\r\n\t@Prop() public _hasCounter?: boolean;\r\n\r\n\t/**\r\n\t * Blendet die Beschriftung (Label) aus und zeigt sie stattdessen mittels eines Tooltips an.\r\n\t */\r\n\t@Prop() public _hideLabel?: boolean;\r\n\r\n\t/**\r\n\t * Gibt den Hinweistext an.\r\n\t */\r\n\t@Prop() public _hint?: string = '';\r\n\r\n\t/**\r\n\t * Setzt die Iconklasse (z.B.: `_icon=\"codicon codicon-home`).\r\n\t */\r\n\t@Prop() public _icon?: Stringified<KoliBriHorizontalIcon>;\r\n\r\n\t/**\r\n\t * Gibt die interne ID des primären Elements in der Komponente an.\r\n\t */\r\n\t@Prop() public _id?: string;\r\n\r\n\t/**\r\n\t * Setzt die sichtbare oder semantische Beschriftung der Komponente (z.B. Aria-Label, Label, Headline, Caption, Summary usw.).\r\n\t */\r\n\t@Prop() public _label!: LabelWithExpertSlotPropType;\r\n\r\n\t/**\r\n\t * Gibt die Liste der Vorschlagswörter an.\r\n\t */\r\n\t@Prop() public _list?: Stringified<string[]>;\r\n\r\n\t/**\r\n\t * Gibt an, wie viele Zeichen maximal eingegeben werden können.\r\n\t */\r\n\t@Prop() public _maxLength?: number;\r\n\r\n\t/**\r\n\t * Gibt den technischen Namen des Eingabefeldes an.\r\n\t */\r\n\t@Prop() public _name?: string;\r\n\r\n\t/**\r\n\t * Gibt die EventCallback-Funktionen für das Input-Event an.\r\n\t */\r\n\t@Prop() public _on?: InputTypeOnDefault;\r\n\r\n\t/**\r\n\t * Gibt ein Prüfmuster (Pattern) für das Eingabefeld an.\r\n\t */\r\n\t@Prop() public _pattern?: string;\r\n\r\n\t/**\r\n\t * Gibt den Platzhalter des Eingabefeldes an, wenn es leer ist.\r\n\t */\r\n\t@Prop() public _placeholder?: string;\r\n\r\n\t/**\r\n\t * Setzt das Eingabefeld in den schreibgeschützten Modus.\r\n\t */\r\n\t@Prop() public _readOnly?: boolean;\r\n\r\n\t/**\r\n\t * Macht das Eingabeelement zu einem Pflichtfeld.\r\n\t */\r\n\t@Prop() public _required?: boolean;\r\n\r\n\t/**\r\n\t * Setzt die Breite des Eingabefeldes in Buchstabenbreiten.\r\n\t */\r\n\t@Prop() public _size?: number;\r\n\r\n\t/**\r\n\t * Ermöglicht eine Schaltfläche ins das Eingabefeld mit einer beliebigen Aktion zu einzufügen (ohne label).\r\n\t */\r\n\t@Prop() public _smartButton?: ButtonProps;\r\n\r\n\t/**\r\n\t * Selector for synchronizing the value with another input element.\r\n\t * @internal\r\n\t */\r\n\t@Prop() public _syncValueBySelector?: string;\r\n\r\n\t/**\r\n\t * Gibt an, welchen Tab-Index das primäre Element in der Komponente hat. (https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex)\r\n\t */\r\n\t@Prop() public _tabIndex?: number;\r\n\r\n\t/**\r\n\t * Gibt an, ob dieses Eingabefeld von Nutzer:innen einmal besucht/berührt wurde.\r\n\t */\r\n\t@Prop({ mutable: true, reflect: true }) public _touched?: boolean = false;\r\n\r\n\t/**\r\n\t * Setzt den Typ der Komponente oder des interaktiven Elements in der Komponente an.\r\n\t */\r\n\t@Prop() public _type?: InputTextType = 'text';\r\n\r\n\t/**\r\n\t * Gibt den Wert des Eingabefeldes an.\r\n\t */\r\n\t@Prop({ mutable: true }) public _value?: string;\r\n\r\n\t@State() public state: States = {\r\n\t\t_autoComplete: 'off',\r\n\t\t_currentLength: 0,\r\n\t\t_id: 'id',\r\n\t\t_hasValue: false,\r\n\t\t_label: false, // ⚠ required\r\n\t\t_list: [],\r\n\t\t_type: 'text',\r\n\t};\r\n\r\n\tpublic constructor() {\r\n\t\tthis.controller = new InputTextController(this, 'text', this.host);\r\n\t}\r\n\r\n\t@Watch('_accessKey')\r\n\tpublic validateAccessKey(value?: string): void {\r\n\t\tthis.controller.validateAccessKey(value);\r\n\t}\r\n\r\n\t@Watch('_alert')\r\n\tpublic validateAlert(value?: boolean): void {\r\n\t\tvalidateAlert(this, value);\r\n\t}\r\n\r\n\t@Watch('_autoComplete')\r\n\tpublic validateAutoComplete(value?: InputTypeOnOff): void {\r\n\t\tthis.controller.validateAutoComplete(value);\r\n\t}\r\n\r\n\t@Watch('_disabled')\r\n\tpublic validateDisabled(value?: boolean): void {\r\n\t\tthis.controller.validateDisabled(value);\r\n\t}\r\n\r\n\t@Watch('_error')\r\n\tpublic validateError(value?: string): void {\r\n\t\tthis.controller.validateError(value);\r\n\t}\r\n\r\n\t@Watch('_hasCounter')\r\n\tpublic validateHasCounter(value?: boolean): void {\r\n\t\tthis.controller.validateHasCounter(value);\r\n\t}\r\n\r\n\t@Watch('_hideLabel')\r\n\tpublic validateHideLabel(value?: boolean): void {\r\n\t\tvalidateHideLabel(this, value);\r\n\t}\r\n\r\n\t@Watch('_hint')\r\n\tpublic validateHint(value?: string): void {\r\n\t\tthis.controller.validateHint(value);\r\n\t}\r\n\r\n\t@Watch('_icon')\r\n\tpublic validateIcon(value?: Stringified<KoliBriHorizontalIcon>): void {\r\n\t\tthis.controller.validateIcon(value);\r\n\t}\r\n\r\n\t@Watch('_id')\r\n\tpublic validateId(value?: string): void {\r\n\t\tthis.controller.validateId(value);\r\n\t}\r\n\r\n\t@Watch('_label')\r\n\tpublic validateLabel(value?: LabelWithExpertSlotPropType): void {\r\n\t\tthis.controller.validateLabel(value);\r\n\t}\r\n\r\n\t@Watch('_list')\r\n\tpublic validateList(value?: Stringified<string[]>): void {\r\n\t\tthis.controller.validateList(value);\r\n\t}\r\n\r\n\t@Watch('_maxLength')\r\n\tpublic validateMaxLength(value?: number): void {\r\n\t\tthis.controller.validateMaxLength(value);\r\n\t}\r\n\r\n\t@Watch('_name')\r\n\tpublic validateName(value?: string): void {\r\n\t\tthis.controller.validateName(value);\r\n\t}\r\n\r\n\t@Watch('_on')\r\n\tpublic validateOn(value?: InputTypeOnDefault): void {\r\n\t\tthis.controller.validateOn(value);\r\n\t}\r\n\r\n\t@Watch('_pattern')\r\n\tpublic validatePattern(value?: string): void {\r\n\t\tthis.controller.validatePattern(value);\r\n\t}\r\n\r\n\t@Watch('_placeholder')\r\n\tpublic validatePlaceholder(value?: string): void {\r\n\t\tthis.controller.validatePlaceholder(value);\r\n\t}\r\n\r\n\t@Watch('_readOnly')\r\n\tpublic validateReadOnly(value?: boolean): void {\r\n\t\tthis.controller.validateReadOnly(value);\r\n\t}\r\n\r\n\t@Watch('_required')\r\n\tpublic validateRequired(value?: boolean): void {\r\n\t\tthis.controller.validateRequired(value);\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t */\r\n\t@Watch('_size')\r\n\tpublic validateSize(value?: number): void {\r\n\t\tthis.controller.validateSize(value);\r\n\t}\r\n\r\n\t@Watch('_smartButton')\r\n\tpublic validateSmartButton(value?: ButtonProps | string): void {\r\n\t\tthis.controller.validateSmartButton(value);\r\n\t}\r\n\r\n\t@Watch('_syncValueBySelector')\r\n\tpublic validateSyncValueBySelector(value?: string): void {\r\n\t\tthis.controller.validateSyncValueBySelector(value);\r\n\t}\r\n\r\n\t@Watch('_tabIndex')\r\n\tpublic validateTabIndex(value?: number): void {\r\n\t\tthis.controller.validateTabIndex(value);\r\n\t}\r\n\r\n\t@Watch('_touched')\r\n\tpublic validateTouched(value?: boolean): void {\r\n\t\tthis.controller.validateTouched(value);\r\n\t}\r\n\r\n\t@Watch('_type')\r\n\tpublic validateType(value?: InputTextType): void {\r\n\t\tthis.controller.validateType(value);\r\n\t}\r\n\r\n\t@Watch('_value')\r\n\tpublic validateValue(value?: string): void {\r\n\t\tthis.controller.validateValue(value);\r\n\t}\r\n\r\n\tpublic componentWillLoad(): void {\r\n\t\tthis._alert = this._alert === true;\r\n\t\tthis._touched = this._touched === true;\r\n\t\tthis.oldValue = this._value;\r\n\t\tthis.controller.componentWillLoad();\r\n\r\n\t\tthis.state._hasValue = !!this.state._value;\r\n\t\tthis.controller.addValueChangeListener((v) => (this.state._hasValue = !!v));\r\n\t}\r\n\r\n\tpublic disconnectedCallback(): void {\r\n\t\tthis.ref?.removeEventListener('search', this.onChange);\r\n\t}\r\n}\r\n"],"mappings":";;;ylBAgBO,MAAMA,EAAgB,CAACC,EAAsCC,KACnEC,EAAaF,EAAW,SAAUC,EAAM,ECjBzC,MAAME,EAAkB,21DCkBxBC,EAAY,uD,MAYCC,EAAY,MA+BjBC,SACN,MAAMC,gBAAEA,GAAoBC,EAAgBC,KAAKC,OACjD,MAAMC,EAAUC,MAAMC,QAAQJ,KAAKC,MAAMI,QAAUL,KAAKC,MAAMI,MAAMC,OAAS,EAC7E,MAAMC,EAAiBP,KAAKC,MAAMO,SAAW,GAC7C,MAAMC,EAAkBT,KAAKC,MAAMO,SAAW,IAC9C,OACCE,EAACC,EAAI,CACJC,MAAO,CACN,YAAaZ,KAAKC,MAAMY,YAGzBH,EAAA,aACCE,MAAO,CACN,CAACZ,KAAKC,MAAMa,OAAQ,KACpB,eAAgBd,KAAKC,MAAMc,YAE5BC,eAAgBhB,KAAKC,MAAMe,eAC3BC,UAAWjB,KAAKC,MAAMgB,UACtBC,OAAQlB,KAAKC,MAAMiB,OACnBC,YAAanB,KAAKC,MAAMkB,YACxBJ,WAAYf,KAAKC,MAAMc,WACvBK,MAAOpB,KAAKC,MAAMmB,MAClBC,MAAOrB,KAAKC,MAAMoB,MAClBC,IAAKtB,KAAKC,MAAMqB,IAChBjB,MAAOL,KAAKC,MAAMI,MAClBkB,WAAYvB,KAAKC,MAAMsB,WACvBC,UAAWxB,KAAKC,MAAMuB,UACtBC,UAAWzB,KAAKC,MAAMwB,UACtBC,aAAc1B,KAAKC,MAAMyB,aACzBC,SAAU3B,KAAKC,MAAM0B,SACrBC,QAAS,SAAAC,EAAM,OAAAA,EAAA7B,KAAK8B,OAAG,MAAAD,SAAA,SAAAA,EAAEE,OAAO,GAEhCrB,EAAA,QAAMsB,KAAK,SAASzB,EAAiBG,EAAA,QAAMuB,KAAK,WAAmBxB,EAAkBC,EAAA,aAAgBV,KAAKC,MAAMO,QAChHE,EAAA,QAAAwB,OAAAC,OAAA,CACCL,IAAK9B,KAAKoC,SACVC,UAAWrC,KAAKC,MAAMqC,WAAU,mBACdxC,EAAgBQ,OAAS,EAAIR,EAAgByC,KAAK,KAAOC,UAAS,kBACnE,GAAGxC,KAAKC,MAAMqB,YAC/BmB,eAAe,MACfC,aAAc1C,KAAKC,MAAM0C,cACzBC,YAAY,MACZC,SAAU7C,KAAKC,MAAMgB,UACrB6B,GAAI9C,KAAKC,MAAMqB,IACfyB,KAAM7C,EAAU,GAAGF,KAAKC,MAAMqB,WAAakB,UAC3CQ,UAAWhD,KAAKC,MAAMsB,WACtBU,KAAMjC,KAAKC,MAAMgD,MACjBC,QAASlD,KAAKC,MAAMkD,SACpBC,YAAapD,KAAKC,MAAMoD,aACxBC,SAAUtD,KAAKC,MAAMuB,UACrB+B,SAAUvD,KAAKC,MAAMwB,UACrB+B,KAAMxD,KAAKC,MAAMwD,MACjBzB,KAAK,QACL0B,WAAW,QACXC,MAAM,GAENC,KAAM5D,KAAKC,MAAMa,MACjBtB,MAAOQ,KAAKC,MAAM4D,QACd7D,KAAK8D,WAAWC,SAAQ,CAE5BC,QAAShE,KAAKgE,Y,CAsJnBC,YAAAC,G,UA3OiBlE,KAAAoC,SAAYN,I,MAC5B9B,KAAK8B,IAAMA,EACXqC,EAAenE,KAAKoE,KAAMpE,KAAK8B,KAC/B9B,KAAKqE,wBACLxC,EAAA7B,KAAK8B,OAAG,MAAAD,SAAA,SAAAA,EAAEyC,iBAAiB,SAAUtE,KAAKuE,SAAS,EAGnCvE,KAAAgE,QAAWQ,IAC3BC,EAASzE,KAAM,iBAAmBwE,EAAME,OAA4BlF,MAAMc,QAC1E,GAAIkE,EAAMG,OAAS,SAAWH,EAAMG,OAAS,cAAe,CAC3DC,EAA2B,CAC1BC,KAAM7E,KAAKoE,KACXtC,IAAK9B,KAAK8B,K,KAEL,CACN9B,KAAKuE,SAASC,E,GAICxE,KAAAuE,SAAYC,I,QAC5B,GAAIxE,KAAK8E,aAAajD,EAAA7B,KAAK8B,OAAG,MAAAD,SAAA,SAAAA,EAAErC,OAAO,CACtCQ,KAAK8E,UAAWC,EAAA/E,KAAK8B,OAAG,MAAAiD,SAAA,SAAAA,EAAEvF,MAC1BQ,KAAK8D,WAAWC,SAASQ,SAASC,E,yCAgF8B,K,4IA8BlC,G,uXAiFoC,M,WAK7B,O,iCAOP,CAC/B7B,cAAe,MACf3B,eAAgB,EAChBM,IAAK,KACLT,UAAW,MACXL,OAAQ,MACRH,MAAO,GACPS,MAAO,QAIPd,KAAK8D,WAAa,IAAIkB,EAAoBhF,KAAM,OAAQA,KAAKoE,K,CAIvDa,kBAAkBzF,GACxBQ,KAAK8D,WAAWmB,kBAAkBzF,E,CAI5BF,cAAcE,GACpBF,EAAcU,KAAMR,E,CAId0F,qBAAqB1F,GAC3BQ,KAAK8D,WAAWoB,qBAAqB1F,E,CAI/B2F,iBAAiB3F,GACvBQ,KAAK8D,WAAWqB,iBAAiB3F,E,CAI3B4F,cAAc5F,GACpBQ,KAAK8D,WAAWsB,cAAc5F,E,CAIxB6F,mBAAmB7F,GACzBQ,KAAK8D,WAAWuB,mBAAmB7F,E,CAI7B8F,kBAAkB9F,GACxB8F,EAAkBtF,KAAMR,E,CAIlB+F,aAAa/F,GACnBQ,KAAK8D,WAAWyB,aAAa/F,E,CAIvBgG,aAAahG,GACnBQ,KAAK8D,WAAW0B,aAAahG,E,CAIvBiG,WAAWjG,GACjBQ,KAAK8D,WAAW2B,WAAWjG,E,CAIrBkG,cAAclG,GACpBQ,KAAK8D,WAAW4B,cAAclG,E,CAIxBmG,aAAanG,GACnBQ,KAAK8D,WAAW6B,aAAanG,E,CAIvBoG,kBAAkBpG,GACxBQ,KAAK8D,WAAW8B,kBAAkBpG,E,CAI5BqG,aAAarG,GACnBQ,KAAK8D,WAAW+B,aAAarG,E,CAIvBsG,WAAWtG,GACjBQ,KAAK8D,WAAWgC,WAAWtG,E,CAIrBuG,gBAAgBvG,GACtBQ,KAAK8D,WAAWiC,gBAAgBvG,E,CAI1BwG,oBAAoBxG,GAC1BQ,KAAK8D,WAAWkC,oBAAoBxG,E,CAI9ByG,iBAAiBzG,GACvBQ,KAAK8D,WAAWmC,iBAAiBzG,E,CAI3B0G,iBAAiB1G,GACvBQ,KAAK8D,WAAWoC,iBAAiB1G,E,CAO3B2G,aAAa3G,GACnBQ,KAAK8D,WAAWqC,aAAa3G,E,CAIvB4G,oBAAoB5G,GAC1BQ,KAAK8D,WAAWsC,oBAAoB5G,E,CAI9B6G,4BAA4B7G,GAClCQ,KAAK8D,WAAWuC,4BAA4B7G,E,CAItC8G,iBAAiB9G,GACvBQ,KAAK8D,WAAWwC,iBAAiB9G,E,CAI3B+G,gBAAgB/G,GACtBQ,KAAK8D,WAAWyC,gBAAgB/G,E,CAI1BgH,aAAahH,GACnBQ,KAAK8D,WAAW0C,aAAahH,E,CAIvBiH,cAAcjH,GACpBQ,KAAK8D,WAAW2C,cAAcjH,E,CAGxBkH,oBACN1G,KAAK2G,OAAS3G,KAAK2G,SAAW,KAC9B3G,KAAK2B,SAAW3B,KAAK2B,WAAa,KAClC3B,KAAK8E,SAAW9E,KAAK6D,OACrB7D,KAAK8D,WAAW4C,oBAEhB1G,KAAKC,MAAMY,YAAcb,KAAKC,MAAM4D,OACpC7D,KAAK8D,WAAW8C,wBAAwBC,GAAO7G,KAAKC,MAAMY,YAAcgG,G,CAGlExC,uB,OACNxC,EAAA7B,KAAK8B,OAAG,MAAAD,SAAA,SAAAA,EAAEiF,oBAAoB,SAAU9G,KAAKuE,S"}